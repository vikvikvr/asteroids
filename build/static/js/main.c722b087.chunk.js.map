{"version":3,"sources":["core/Entity.ts","core/GameObject.ts","core/Bullet.ts","core/Ship.ts","lib/geometry.ts","core/Events.ts","client/KeyController.ts","core/Drop.ts","core/Asteroid.ts","core/Spawner.ts","core/GameEngine.ts","server/GameServer.ts","client/GUI.ts","client/colors.ts","client/Animation.ts","client/Drawer.ts","client/assets-loaders.ts","client/Sketch.ts","index.ts"],"names":["Entity","options","coords","speed","acceleration","orientation","direction","world","rotationSpeed","angularSpeed","targetDirection","this","width","height","x","y","times","i","updatePosition","approachTargetDirection","Math","min","max","cos","sin","teleportOffEdges","GameObject","id","type","hitBoxRadius","life","isExpired","tail","expiresAt","hasTail","tailLength","uuidv4","Date","now","duration","Infinity","length","shift","push","Bullet","startingDirection","PI","Ship","bullets","shielded","rotationStep","rightRotations","leftRotations","ACC_SPRINTS","DEC_SPRINTS","FUEL_CONSUMPTION","sprints","MAX_SPEED","SHIELD_DURATION","remove","forEach","bullet","update","modifySpeed","setTargetDirection","getComputedDirection","makeBullet","setTimeout","map","b","serialize","useSprintsToAccelerateForward","useSprintsToAccelerateBackwards","decelerateBackToZero","Boolean","find","mult","abs","steps","distance","obj1","obj2","deltaX","deltaY","sqrt","haveCollided","randomCoordsFarFrom","object","distFromObject","hitBoxMultiplier","tries","Error","random","notDirection","coneAngle","dir","tryPuttingValueInsideRange","value","adjustment","isBetween","drawableCoords","origin","screen","showAlways","screenCoords","result","mostVisibleCoords","Keys","GameEvent","ShipHit","asteroid","asteroidId","damage","size","BulletHit","shattered","bulletId","GotBonus","bonus","bonusId","bonusType","dropType","Drop","rotatingRight","rotationCone","changeRotationDirection","speeds","large","medium","small","hitBoxes","damages","Asteroid","sign","changeDirection","angleChange","newDirection","Spawner","state","nextBonusSpawnAt","nextAsteroidSpawnAt","asteroidTimer","bonusTimer","HIT_BOX_MULTIPLIER","CONE_ANGLE","asteroids","bonuses","added","count","dropOptions","makeDropOptions","drop","asteroidOptions","makeAsteroidOptions","ms","setInterval","spawnAsteroid","roll","ship","GameEngine","rect","status","spawner","gameOverCallback","gameWonCallback","snapshotTimeout","events","score","level","frozen","callback","asteroidEvery","createSnapshot","updateAsteroids","updateBonuses","checkCollisions","updateLevel","checkGameWon","checkGameLost","filter","countAsteroids","etas","getEtas","snapshot","createdAt","a","e","clearInterval","skip","checkAsteroidBulletCollisions","checkAsteroidShipCollisions","checkBonusShipCollisions","event","ev","processBulletHit","assignScore","processShipHit","processGotBonus","createLoot","nextSize","splitSize","console","log","SCORES","floor","restoreLife","activateShield","spawnBonus","GameServer","engine","container","document","getElementById","on","handleStartRequest","handleCommand","handler","addEventListener","bind","startLevel","sendSnapshotToClient","dispatchEvent","Event","CustomEvent","detail","command","KeyController","rootElementId","keyCode","ARROW_LEFT","sendCommand","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","SPACE_BAR","SPACING","GUI","p5","colors","drawShipInfo","drawScore","topLeft","text","fill","noStroke","textAlign","LEFT","toFixed","windowWidth","CENTER","freeze","inactive","shield","hud","space","Animation","frameCount","currentFrame","OverlayAnimation","color","ImageAnimation","frames","scale","image","Drawer","stars","assets","showHitBoxes","gui","animations","createCanvas","windowHeight","parent","COLORS","createStars","drawGameScreen","drawGameOverScreen","drawGameWonScreen","resizeCanvas","drawEnvironment","drawGameObjects","createNewAnimations","drawAnimations","draw","background","drawStars","drawBullets","drawShip","drawBonuses","drawAsteroids","myEvent","animation","drawable","getNextFrame","drawGameObject","frame","next","alpha","rectMode","CORNER","amount","radius","star","circle","images","side","imageMode","translate","rotate","rotateDirection","rotationOffset","noFill","stroke","pop","point","loadImage","path","Promise","resolve","reject","error","loadMultipleImages","howMany","pathCreator","promises","all","loadExplosionAnimation","index","twoDigitsPadded","toString","padStart","loadShatterAnimation","loadImageAssets","names","name","loadAssets","explosionAnimation","shatterAnimation","Sketch","drawer","lastSnapshot","keyController","loaded","preload","setup","frameRate","$loading","body","removeChild","keyPressed","pressed","windowResized","resizeScreen","updateSnapshot","drawScreen","start","P5"],"mappings":"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","file":"static/js/main.c722b087.chunk.js","sourcesContent":["import { Point, Rect } from '../lib/geometry';\n\nexport type EntityOptions = {\n  world: Rect;\n  coords: Point;\n  speed: number;\n  acceleration: number;\n  direction: number;\n  angularSpeed: number;\n  orientation: number;\n  rotationSpeed: number;\n  interpolationSteps: number;\n};\n\nexport interface EntitySnapshot {\n  acceleration: number;\n  coords: Point;\n  speed: number;\n  orientation: number;\n  direction: number;\n  world: Rect;\n  rotationSpeed: number;\n}\n\nclass Entity {\n  // public\n  public coords: Point;\n  public speed: number;\n  public acceleration: number;\n  public orientation: number;\n  public direction: number;\n  public world: Rect;\n  public rotationSpeed: number;\n  // private\n  private angularSpeed: number;\n  private targetDirection: number;\n\n  constructor(options: Partial<EntityOptions> = {}) {\n    this.world = options.world || { width: 1000, height: 1000 };\n    this.coords = { x: options?.coords?.x || 0, y: options?.coords?.y || 0 };\n    this.speed = options.speed || 0;\n    this.acceleration = options.acceleration || 0;\n    this.direction = options.direction || 0;\n    this.targetDirection = this.direction;\n    this.orientation = options.orientation || 0;\n    this.angularSpeed = options.angularSpeed || 0;\n    this.rotationSpeed = options.rotationSpeed || 0;\n  }\n\n  protected serialize(): EntitySnapshot {\n    return {\n      coords: {...this.coords},\n      speed: this.speed,\n      acceleration: this.acceleration,\n      orientation: this.orientation,\n      direction: this.direction,\n      world: this.world,\n      rotationSpeed: this.rotationSpeed\n    };\n  }\n\n  protected changeRotationDirection() {\n    this.rotationSpeed *= -1;\n  }\n\n  protected update(times: number = 1): void {\n    for (let i = 0; i < times; i++) {\n      this.updatePosition();\n      this.approachTargetDirection();\n      this.orientation += this.rotationSpeed;\n    }\n  }\n\n  protected setTargetDirection(direction: number): void {\n    this.targetDirection = direction;\n  }\n\n  private approachTargetDirection(): void {\n    if (this.targetDirection > this.direction) {\n      this.direction = Math.min(\n        this.targetDirection,\n        this.direction + this.angularSpeed\n      );\n    } else if (this.targetDirection < this.direction) {\n      this.direction = Math.max(\n        this.targetDirection,\n        this.direction - this.angularSpeed\n      );\n    }\n  }\n\n  private updatePosition(): void {\n    this.coords.x += Math.cos(this.direction) * this.speed;\n    this.coords.y += Math.sin(this.direction) * this.speed;\n    this.teleportOffEdges();\n  }\n\n  private teleportOffEdges(): void {\n    if (this.coords.x > this.world.width) this.coords.x -= this.world.width;\n    if (this.coords.x < 0) this.coords.x += this.world.width;\n    if (this.coords.y > this.world.height) this.coords.y -= this.world.height;\n    if (this.coords.y < 0) this.coords.y += this.world.height;\n  }\n}\n\nexport default Entity;\n","import Entity, { EntityOptions, EntitySnapshot } from './Entity';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Point } from '../lib/geometry';\n\nexport type GameObjectType = 'ship' | 'asteroid' | 'bullet' | 'drop';\n\nexport interface GameObjectOptions extends Partial<EntityOptions> {\n  type?: GameObjectType;\n  hitBoxRadius?: number;\n  duration?: number;\n  hasTail?: boolean;\n  tailLength?: number;\n}\n\nexport interface GameObjectSnapshot extends EntitySnapshot {\n  id: string;\n  type: GameObjectType;\n  hitBoxRadius: number;\n  life: number;\n  isExpired: boolean;\n  tail: Point[];\n}\n\nclass GameObject extends Entity {\n  // public\n  public id: string;\n  public type: GameObjectType;\n  public hitBoxRadius: number;\n  public life: number;\n  public isExpired: boolean;\n  public tail: Point[] = [];\n  // private\n  private expiresAt: number;\n  private hasTail: boolean;\n  private tailLength: number;\n  // constructor\n  constructor(options: GameObjectOptions = {}) {\n    super({ ...options });\n    this.id = uuidv4();\n    this.type = options.type || 'asteroid';\n    this.hitBoxRadius = options.hitBoxRadius || 50;\n    this.isExpired = false;\n    this.life = 1;\n    this.expiresAt = Date.now() + (options.duration || Infinity);\n    this.hasTail = options.hasTail || false;\n    this.tailLength = options.tailLength || 20;\n  }\n\n  protected serialize(): GameObjectSnapshot {\n    return {\n      ...super.serialize(),\n      id: this.id,\n      type: this.type,\n      hitBoxRadius: this.hitBoxRadius,\n      life: this.life,\n      isExpired: this.isExpired,\n      tail: this.tail\n    };\n  }\n\n  protected update(): void {\n    super.update();\n    this.isExpired = Date.now() > this.expiresAt;\n    if (this.hasTail) {\n      if (this.tail.length === this.tailLength) {\n        this.tail.shift();\n      }\n      this.tail.push({ ...this.coords });\n    }\n  }\n}\n\nexport default GameObject;\n","import GameObject, {\n  GameObjectOptions,\n  GameObjectSnapshot\n} from './GameObject';\n\ntype BulletOptions = Omit<\n  GameObjectOptions,\n  'type' | 'hitBoxRadius' | 'duration'\n>;\n\nexport type BulletSnapshot = GameObjectSnapshot;\n\nclass Bullet extends GameObject {\n  constructor(options: BulletOptions = {}) {\n    super({\n      ...options,\n      type: 'bullet',\n      hitBoxRadius: 3,\n      duration: 2000\n    });\n  }\n\n  public update() {\n    super.update();\n  }\n\n  public serialize(): BulletSnapshot {\n    return super.serialize();\n  }\n}\n\nexport default Bullet;\n","import GameObject, { GameObjectSnapshot } from './GameObject';\nimport { find, remove } from 'lodash';\nimport { EntityOptions } from './Entity';\nimport Bullet, { BulletSnapshot } from './Bullet';\nimport { DropType } from './Drop';\n\nexport type CargoMap = Record<DropType, number>;\n\nconst startingDirection = -Math.PI / 2;\n\nexport interface ShipSnapshot extends GameObjectSnapshot {\n  bullets: BulletSnapshot[];\n  shielded: boolean;\n}\n\nclass Ship extends GameObject {\n  // public\n  public bullets: Bullet[] = [];\n  public shielded: boolean = false;\n  // private\n  private rotationStep = Math.PI / 6;\n  private startingDirection = startingDirection;\n  private rightRotations = 0;\n  private leftRotations = 0;\n  private ACC_SPRINTS = 30;\n  private DEC_SPRINTS = 15;\n  private FUEL_CONSUMPTION = 1 / 3_000;\n  private sprints = 0;\n  // readonly\n  readonly MAX_SPEED = 4;\n  readonly SHIELD_DURATION = 7000;\n  // constructor\n  constructor(options: Partial<EntityOptions> = {}) {\n    super({\n      ...options,\n      type: 'ship',\n      hitBoxRadius: 30,\n      direction: startingDirection,\n      acceleration: 1 / 10,\n      angularSpeed: Math.PI / 3 / 20,\n      hasTail: true\n    });\n  }\n\n  public update(times = 1): void {\n    for (let i = 0; i < times; i++) {\n      super.update();\n      remove(this.bullets, { isExpired: true });\n      this.bullets.forEach((bullet) => bullet.update());\n      this.modifySpeed();\n    }\n  }\n\n  public turnLeft(): void {\n    this.setTargetDirection(this.getComputedDirection() - this.rotationStep);\n    this.leftRotations++;\n  }\n\n  public turnRight(): void {\n    this.setTargetDirection(this.getComputedDirection() + this.rotationStep);\n    this.rightRotations++;\n  }\n\n  public accelerate(times = 1): void {\n    for (let i = 0; i < times; i++) {\n      if (this.sprints > 0) {\n        this.sprints += this.ACC_SPRINTS;\n      } else {\n        this.sprints = this.ACC_SPRINTS;\n      }\n    }\n  }\n\n  public decelerate(times = 1): void {\n    for (let i = 0; i < times; i++) {\n      if (this.sprints < 0) {\n        this.sprints += -this.DEC_SPRINTS;\n      } else {\n        this.sprints = -this.DEC_SPRINTS;\n      }\n    }\n  }\n\n  public fire(): Bullet {\n    let bullet = this.makeBullet();\n    this.bullets.push(bullet);\n    return bullet;\n  }\n\n  public restoreLife() {\n    this.life = 1;\n  }\n\n  public activateShield() {\n    this.shielded = true;\n    setTimeout(() => {\n      this.shielded = false;\n    }, this.SHIELD_DURATION);\n  }\n\n  public serialize(): ShipSnapshot {\n    return {\n      ...super.serialize(),\n      bullets: this.bullets.map((b) => b.serialize()),\n      shielded: this.shielded\n    };\n  }\n\n  private modifySpeed() {\n    if (this.sprints > 0) {\n      this.useSprintsToAccelerateForward();\n    } else if (this.sprints < 0) {\n      this.useSprintsToAccelerateBackwards();\n    } else {\n      this.decelerateBackToZero();\n    }\n  }\n\n  private hasBullet(id: string): boolean {\n    return Boolean(find(this.bullets, { id }));\n  }\n\n  private decelerateBackToZero(): void {\n    let mult: number;\n    if (this.speed > 0) {\n      mult = Math.abs(this.MAX_SPEED - this.speed) / 2;\n      this.speed = Math.max(this.speed - this.acceleration * mult, 0);\n    } else if (this.speed < 0) {\n      mult = Math.abs(-this.MAX_SPEED - this.speed) / 2;\n      this.speed = Math.min(this.speed + this.acceleration * mult, 0);\n    }\n  }\n\n  private useSprintsToAccelerateForward(): void {\n    let mult = (Math.abs(this.MAX_SPEED - this.speed) / 2) ** 2;\n    this.speed += this.acceleration * mult;\n    this.sprints--;\n  }\n\n  private useSprintsToAccelerateBackwards(): void {\n    let mult = Math.abs(-this.MAX_SPEED - this.speed) / 2;\n    this.speed -= this.acceleration * mult;\n    this.sprints++;\n  }\n\n  private getComputedDirection(): number {\n    let steps = (-this.leftRotations + this.rightRotations) * this.rotationStep;\n    return this.startingDirection + steps;\n  }\n\n  private makeBullet(): Bullet {\n    return new Bullet({\n      world: this.world,\n      direction: this.direction,\n      coords: this.coords,\n      speed: Math.max(this.speed, 0) + 12\n    });\n  }\n}\n\nexport default Ship;\n","export type Point = {\n  x: number;\n  y: number;\n};\n\nexport type Rect = {\n  width: number;\n  height: number;\n};\n\nexport type Collidable = {\n  hitBoxRadius: number;\n  coords: Point;\n};\n\nexport function centerOf(rect: Rect): Point {\n  return {\n    x: rect.width / 2,\n    y: rect.height / 2\n  };\n}\n\nexport function distance(obj1: Point, obj2: Point): number {\n  let deltaX = obj1.x - obj2.x;\n  let deltaY = obj1.y - obj2.y;\n  return Math.sqrt(deltaX ** 2 + deltaY ** 2);\n}\n\nexport function haveCollided(obj1: Collidable, obj2: Collidable): boolean {\n  let dist = distance(obj1.coords, obj2.coords);\n  let minDistance = obj1.hitBoxRadius + obj2.hitBoxRadius;\n  return dist < minDistance;\n}\n\nexport function randomCoordsFarFrom(\n  object: Collidable,\n  world: Rect,\n  hitBoxMultiplier = 2\n): Point {\n  let distFromObject, coords;\n  let tries = 0;\n  do {\n    if (tries > 100) throw Error('Could not create randomCoordsFarFrom');\n    tries++;\n    coords = {\n      x: Math.random() * world.width,\n      y: Math.random() * world.height\n    };\n    distFromObject = distance(coords, object.coords);\n  } while (distFromObject < object.hitBoxRadius * hitBoxMultiplier);\n\n  return coords;\n}\n\nexport function notDirection(\n  direction: number,\n  coneAngle: number,\n  random: () => number\n): number {\n  if (direction < 0) direction += Math.PI;\n\n  let dir: number;\n  do {\n    dir = random() * Math.PI * 2;\n  } while (Math.abs(dir - direction) <= coneAngle / 2);\n  return dir;\n}\n\nfunction tryPuttingValueInsideRange(\n  value: number,\n  adjustment: number,\n  max: number,\n  min = 0\n): number {\n  if (value < min) {\n    return value + adjustment;\n  } else if (value > max) {\n    return value - adjustment;\n  } else {\n    return value;\n  }\n}\n\nfunction mostVisibleCoords(\n  screenCoords: Point,\n  world: Rect,\n  screen: Rect\n): Point {\n  let bestX = tryPuttingValueInsideRange(\n    screenCoords.x,\n    world.width,\n    screen.width\n  );\n  let bestY = tryPuttingValueInsideRange(\n    screenCoords.y,\n    world.height,\n    screen.height\n  );\n\n  return {\n    x: bestX,\n    y: bestY\n  };\n}\n\nfunction isBetween(value: number, max: number, min = 0): boolean {\n  return value >= min && value <= max;\n}\n\n// assuming origin is always drawn in the middle of the screen\nexport function drawableCoords(\n  object: Point,\n  origin: Point,\n  screen: Rect,\n  world: Rect,\n  showAlways?: boolean\n): Point | undefined {\n  let deltaX = object.x - origin.x;\n  let deltaY = object.y - origin.y;\n  let screenX = screen.width / 2 + deltaX;\n  let screenY = screen.height / 2 + deltaY;\n  let screenCoords = { x: screenX, y: screenY };\n\n  if (showAlways) return screenCoords;\n\n  let result = mostVisibleCoords(screenCoords, world, screen);\n  if (!isBetween(result.x, screen.width)) return undefined;\n  if (!isBetween(result.y, screen.height)) return undefined;\n  return result;\n}\n","import { v4 as uuidv4 } from 'uuid';\nimport { Point } from '../lib/geometry';\nimport Asteroid, { AsteroidDamage, AsteroidSize } from './Asteroid';\nimport Bullet from './Bullet';\nimport Drop, { DropType } from './Drop';\n\nexport type GameEventType = 'BULLET_HIT' | 'SHIP_HIT' | 'GOT_BONUS';\n\nexport type GameEventSnapshot =\n  | GotBonusSnapshot\n  | ShipHitSnapshot\n  | BulletHitSnapshot;\n\nexport interface IGameEventSnapshot {\n  type: GameEventType;\n  id: string;\n  coords: Point;\n}\n\nexport interface GotBonusSnapshot extends IGameEventSnapshot {\n  bonusType: DropType;\n}\n\nexport interface ShipHitSnapshot extends IGameEventSnapshot {\n  damage: AsteroidDamage;\n  size: AsteroidSize;\n  shielded: boolean;\n}\n\nexport interface BulletHitSnapshot extends IGameEventSnapshot {\n  size: AsteroidSize;\n  shattered: boolean;\n}\n\nexport type TGameEvent = ShipHit | BulletHit | GotBonus;\n\nexport class GameEvent {\n  // public\n  public type: GameEventType;\n  public id: string;\n  public coords: Point;\n  // constructor\n  constructor(type: GameEventType, coords: Point) {\n    this.type = type;\n    this.id = uuidv4();\n    this.coords = { ...coords };\n  }\n\n  protected serialize(): IGameEventSnapshot {\n    return {\n      type: this.type,\n      id: this.id,\n      coords: { ...this.coords }\n    };\n  }\n}\n\nexport class ShipHit extends GameEvent {\n  // public\n  public asteroidId: string;\n  public damage: AsteroidDamage;\n  public size: AsteroidSize;\n  public shielded: boolean;\n  // constructor\n  constructor(asteroid: Asteroid, shielded: boolean) {\n    super('SHIP_HIT', asteroid.coords);\n    this.asteroidId = asteroid.id;\n    this.damage = asteroid.damage;\n    this.size = asteroid.size;\n    this.shielded = shielded;\n  }\n\n  public serialize(): ShipHitSnapshot {\n    return {\n      ...super.serialize(),\n      damage: this.damage,\n      size: this.size,\n      shielded: this.shielded\n    };\n  }\n}\n\nexport class BulletHit extends GameEvent {\n  // public\n  public bulletId: string;\n  public asteroidId: string;\n  public size: AsteroidSize;\n  public shattered: boolean;\n  // constructor\n  constructor(bullet: Bullet, asteroid: Asteroid, shattered: boolean) {\n    super('BULLET_HIT', bullet.coords);\n    this.bulletId = bullet.id;\n    this.asteroidId = asteroid.id;\n    this.size = asteroid.size;\n    this.shattered = shattered;\n  }\n\n  public serialize(): BulletHitSnapshot {\n    return {\n      ...super.serialize(),\n      size: this.size,\n      shattered: this.shattered\n    };\n  }\n}\n\nexport class GotBonus extends GameEvent {\n  public bonusId: string;\n  public bonusType: DropType;\n  constructor(bonus: Drop) {\n    super('GOT_BONUS', bonus.coords);\n    this.bonusId = bonus.id;\n    this.bonusType = bonus.dropType;\n  }\n\n  public serialize(): GotBonusSnapshot {\n    return {\n      ...super.serialize(),\n      bonusType: this.bonusType\n    };\n  }\n}\n","export type Command =\n  | 'turnLeft'\n  | 'turnRight'\n  | 'accelerate'\n  | 'decelerate'\n  | 'fire';\n\nenum Keys {\n  ARROW_LEFT = 37,\n  ARROW_RIGHT = 39,\n  ARROW_UP = 38,\n  ARROW_DOWN = 40,\n  SPACE_BAR = 32,\n  LETTER_H = 72,\n  LETTER_P = 80\n}\n\nclass KeyController {\n  constructor(private rootElementId: string) {}\n\n  public pressed(keyCode: number) {\n    switch (keyCode) {\n      case Keys.ARROW_LEFT:\n        return this.sendCommand('turnLeft');\n      case Keys.ARROW_RIGHT:\n        return this.sendCommand('turnRight');\n      case Keys.ARROW_UP:\n        return this.sendCommand('accelerate');\n      case Keys.ARROW_DOWN:\n        return this.sendCommand('decelerate');\n      case Keys.SPACE_BAR:\n        return this.sendCommand('fire');\n    }\n  }\n\n  private sendCommand(type: Command): void {\n    let container = document.getElementById(this.rootElementId)!;\n    container.dispatchEvent(new CustomEvent('command', { detail: type }));\n  }\n}\n\nexport default KeyController;\n","import GameObject, {\n  GameObjectOptions,\n  GameObjectSnapshot\n} from './GameObject';\n\n// aliases\nexport type DropType = 'fix' | 'freeze' | 'shield';\n\n// constants\nexport const droppable: DropType[] = ['fix', 'freeze', 'shield'];\n\n// interfaces\nexport interface DropOptions\n  extends Omit<GameObjectOptions, 'hitBoxRadius' | 'type'> {\n  type: DropType;\n}\n\nexport interface DropSnapshot extends GameObjectSnapshot {\n  dropType: DropType;\n}\n\nclass Drop extends GameObject {\n  // public\n  public dropType: DropType;\n  // private\n  private rotatingRight: boolean = true;\n  private rotationCone: number = Math.PI / 12;\n  // constructor\n  constructor(options: DropOptions) {\n    super({\n      ...options,\n      hitBoxRadius: 30,\n      type: 'drop',\n      rotationSpeed: Math.PI / 100\n    });\n    this.dropType = options.type;\n  }\n\n  public update() {\n    super.update();\n    if (this.rotatingRight) {\n      if (this.orientation > this.rotationCone) {\n        this.changeRotationDirection();\n        this.rotatingRight = false;\n      }\n    } else {\n      if (this.orientation < -this.rotationCone) {\n        this.changeRotationDirection();\n        this.rotatingRight = true;\n      }\n    }\n  }\n\n  public serialize(): DropSnapshot {\n    return {\n      ...super.serialize(),\n      dropType: this.dropType\n    };\n  }\n}\n\nexport default Drop;\n","import GameObject, {\n  GameObjectOptions,\n  GameObjectSnapshot\n} from './GameObject';\n\n// aliases\nexport type AsteroidSize = 'large' | 'medium' | 'small';\nexport type AsteroidDamage = 0.2 | 0.15 | 0.1;\nexport type AsteroidHitBox = 40 | 30 | 20;\nexport type AsteroidSpeed = 1.5 | 3 | 5;\nexport type AsteroidsCount = Record<AsteroidSize, number>;\n\n// interfaces\nexport interface AsteroidOptions extends Omit<GameObjectOptions, 'type'> {\n  size?: AsteroidSize;\n}\n\nexport interface AsteroidSnapshot extends GameObjectSnapshot {\n  size: AsteroidSize;\n  damage: AsteroidDamage;\n}\n\n// constants\nexport const sizes: AsteroidSize[] = ['large', 'medium', 'small'];\n\nexport const speeds: Record<AsteroidSize, AsteroidSpeed> = {\n  large: 1.5,\n  medium: 3,\n  small: 5\n};\n\nexport const hitBoxes: Record<AsteroidSize, AsteroidHitBox> = {\n  large: 40,\n  medium: 30,\n  small: 20\n};\n\nexport const damages: Record<AsteroidSize, AsteroidDamage> = {\n  large: 0.2,\n  medium: 0.15,\n  small: 0.1\n};\n\nclass Asteroid extends GameObject {\n  public size: AsteroidSize;\n  public damage: AsteroidDamage;\n\n  constructor(options: AsteroidOptions = {}) {\n    let sign = Math.random() > 0.5 ? 1 : -1;\n    let size = options.size || 'large';\n    super({\n      world: options.world,\n      coords: options.coords,\n      hitBoxRadius: hitBoxes[size],\n      speed: speeds[size],\n      type: 'asteroid',\n      direction: options.direction || Math.random() * Math.PI * 2,\n      rotationSpeed: options.rotationSpeed || (sign * Math.PI) / 50,\n      angularSpeed: Math.PI / 3 / 40\n    });\n    this.size = size;\n    this.damage = damages[size];\n  }\n\n  public update() {\n    super.update();\n    if (Math.random() > 0.995) this.changeDirection();\n  }\n\n  public splitSize(): AsteroidSize | null {\n    if (this.size === 'large') return 'medium';\n    if (this.size === 'medium') return 'small';\n    return null;\n  }\n\n  public serialize(): AsteroidSnapshot {\n    return {\n      ...super.serialize(),\n      size: this.size,\n      damage: this.damage\n    };\n  }\n\n  private changeDirection(): void {\n    // console.log('changing direction', this.id);\n    const angleChange = Math.PI / 3;\n    let sign = Math.random() > 0.5 ? 1 : -1;\n    let newDirection = this.direction + angleChange * sign;\n    super.setTargetDirection(newDirection);\n  }\n}\n\nexport default Asteroid;\n","import Drop, { DropOptions, DropType } from './Drop';\nimport { GameState } from './GameEngine';\nimport {\n  notDirection,\n  Point,\n  randomCoordsFarFrom,\n  Rect\n} from '../lib/geometry';\nimport Asteroid, { AsteroidOptions, AsteroidSize } from './Asteroid';\nimport { filter } from 'lodash';\n\nexport interface SpawnOptions {\n  count?: number;\n  coords?: Point;\n}\n\nexport interface BonusSpawnOptions extends SpawnOptions {\n  type?: DropType;\n}\n\nexport interface AsteroidSpawnOptions extends SpawnOptions {\n  size?: AsteroidSize;\n  notDirection?: number;\n}\n\nexport type SpawnerEtas = {\n  asteroids: number;\n  bonuses: number;\n};\n\nexport type ID = string;\n\nclass Spawner {\n  // public\n  public state: GameState;\n  public world: Rect;\n  public nextBonusSpawnAt: number;\n  public nextAsteroidSpawnAt: number;\n  // private\n  private asteroidTimer?: NodeJS.Timeout;\n  private bonusTimer?: NodeJS.Timeout;\n  private HIT_BOX_MULTIPLIER = 5;\n  private CONE_ANGLE = Math.PI / 3;\n\n  constructor(state: GameState, world: Rect) {\n    this.state = state;\n    this.world = world;\n    this.nextAsteroidSpawnAt = Infinity;\n    this.nextBonusSpawnAt = Infinity;\n  }\n\n  public getEtas(): SpawnerEtas {\n    return {\n      asteroids: this.nextAsteroidSpawnAt - Date.now(),\n      bonuses: this.nextBonusSpawnAt - Date.now()\n    };\n  }\n\n  public spawnBonus(options: BonusSpawnOptions = {}): Drop[] {\n    let { bonuses } = this.state;\n    let added: Drop[] = [];\n    for (let i = 0; i < (options.count || 1); i++) {\n      let dropOptions = this.makeDropOptions(options);\n      let drop = new Drop(dropOptions);\n      bonuses.push(drop);\n      added.push(drop);\n    }\n    return added;\n  }\n\n  public spawnAsteroid(options: AsteroidSpawnOptions = {}): Asteroid[] {\n    let { asteroids } = this.state;\n    let added: Asteroid[] = [];\n    for (let i = 0; i < (options.count || 1); i++) {\n      let asteroidOptions = this.makeAsteroidOptions(options);\n      let asteroid = new Asteroid(asteroidOptions);\n      asteroids.push(asteroid);\n      added.push(asteroid);\n    }\n    return added;\n  }\n\n  public asteroidEvery(ms: number, options: AsteroidSpawnOptions = {}) {\n    this.nextAsteroidSpawnAt = Date.now() + ms;\n    this.asteroidTimer = setInterval(() => {\n      this.spawnAsteroid(options);\n      this.nextAsteroidSpawnAt = Date.now() + ms;\n    }, ms);\n  }\n\n  private makeDropOptions(options: BonusSpawnOptions = {}): DropOptions {\n    let type: DropType;\n    if (!options.type) {\n      let roll = Math.random();\n      if (roll < 1 / 3) type = 'fix';\n      else if (roll < 2 / 3) type = 'freeze';\n      else type = 'shield';\n    } else {\n      type = options.type;\n    }\n    let coords =\n      options.coords ||\n      randomCoordsFarFrom(this.state.ship, this.world, this.HIT_BOX_MULTIPLIER);\n    return {\n      type,\n      world: this.world,\n      coords\n    };\n  }\n\n  private makeAsteroidOptions(\n    options: AsteroidSpawnOptions = {}\n  ): AsteroidOptions {\n    let direction = Math.random() * Math.PI * 2;\n    if (options.notDirection) {\n      direction = notDirection(\n        options.notDirection,\n        this.CONE_ANGLE,\n        Math.random\n      );\n    }\n    return {\n      size: options.size || 'large',\n      world: this.world,\n      coords:\n        options.coords ||\n        randomCoordsFarFrom(\n          this.state.ship,\n          this.world,\n          this.HIT_BOX_MULTIPLIER\n        ),\n      direction\n    };\n  }\n}\n\nexport default Spawner;\n","import Ship, { ShipSnapshot } from './Ship';\nimport Asteroid, {\n  AsteroidsCount,\n  AsteroidSize,\n  AsteroidSnapshot\n} from './Asteroid';\nimport { haveCollided, Rect, Point, centerOf } from '../lib/geometry';\nimport * as ev from './Events';\nimport { remove, find, filter } from 'lodash';\nimport Drop, { DropSnapshot } from './Drop';\nimport Spawner, { SpawnerEtas } from './Spawner';\n\nexport type GameStatus = 'playing' | 'won' | 'lost' | 'idle';\n\nexport interface GameState {\n  score: number;\n  level: number;\n  ship: Ship;\n  asteroids: Asteroid[];\n  bonuses: Drop[];\n  events: ev.TGameEvent[];\n  frozen: boolean;\n}\n\nexport interface GameSnapshot {\n  world: Rect;\n  createdAt: number;\n  status: GameStatus;\n  etas: SpawnerEtas;\n  ship: ShipSnapshot;\n  asteroids: AsteroidSnapshot[];\n  bonuses: DropSnapshot[];\n  events: ev.GameEventSnapshot[];\n  score: number;\n  level: number;\n  frozen: boolean;\n}\n\nclass GameEngine {\n  // public\n  public state: GameState;\n  public status: GameStatus = 'idle';\n  public world: Rect;\n  public spawner: Spawner;\n  // private\n  private gameOverCallback?: () => void;\n  private gameWonCallback?: () => void;\n  private snapshotTimeout?: NodeJS.Timeout;\n\n  constructor(world: Rect) {\n    this.state = {\n      asteroids: [],\n      bonuses: [],\n      events: [],\n      ship: new Ship({ world, coords: centerOf(world) }),\n      score: 0,\n      level: 1,\n      frozen: false\n    };\n    this.world = world;\n    this.spawner = new Spawner(this.state, this.world);\n  }\n\n  public startLevel(callback: (snapshot: any) => void): void {\n    let { spawner } = this;\n    this.status = 'playing';\n    spawner.spawnAsteroid({ count: 30 });\n    spawner.asteroidEvery(5_000, { count: 5 });\n    this.snapshotTimeout = setInterval(() => {\n      callback(this.createSnapshot());\n    }, 16);\n  }\n\n  public onGameOver(callback: () => void) {\n    this.gameOverCallback = callback;\n  }\n\n  public onGameWon(callback: () => void) {\n    this.gameWonCallback = callback;\n  }\n\n  private update(): void {\n    this.state.ship.update();\n    this.updateAsteroids(this.state.frozen);\n    this.updateBonuses();\n    this.checkCollisions();\n    this.updateLevel();\n    this.checkGameWon();\n    this.checkGameLost();\n  }\n\n  private countAsteroids(size: AsteroidSize): number {\n    return filter(this.state.asteroids, { size }).length;\n  }\n\n  public hasAsteroid(id: string): boolean {\n    return Boolean(find(this.state.asteroids, { id }));\n  }\n\n  public getAsteroidsCount(): AsteroidsCount {\n    return {\n      large: this.countAsteroids('large'),\n      medium: this.countAsteroids('medium'),\n      small: this.countAsteroids('small')\n    };\n  }\n\n  private createSnapshot(): GameSnapshot {\n    this.update();\n    let etas = this.spawner.getEtas();\n    let { ship, asteroids, bonuses, events } = this.state;\n    let snapshot = {\n      score: this.state.score,\n      level: this.state.level,\n      world: this.world,\n      createdAt: Date.now(),\n      status: this.status,\n      etas,\n      ship: ship.serialize(),\n      asteroids: asteroids.map((a) => a.serialize()),\n      bonuses: bonuses.map((b) => b.serialize()),\n      events: events.map((e) => e.serialize()),\n      frozen: this.state.frozen\n    };\n\n    this.state.events = [];\n\n    return snapshot;\n  }\n\n  private checkGameLost(): void {\n    let { ship } = this.state;\n    if (ship.life <= 0) {\n      this.status = 'lost';\n      if (this.snapshotTimeout) {\n        clearInterval(this.snapshotTimeout);\n      }\n      this.gameOverCallback?.();\n    }\n  }\n\n  private checkGameWon(): void {\n    if (this.state.asteroids.length === 0) {\n      this.status = 'won';\n      if (this.snapshotTimeout) {\n        clearInterval(this.snapshotTimeout);\n      }\n      this.gameWonCallback?.();\n    }\n  }\n\n  private updateAsteroids(skip: boolean): void {\n    if (skip) return;\n    this.state.asteroids.forEach((asteroid) => {\n      asteroid.update();\n    });\n  }\n\n  private updateBonuses(): void {\n    this.state.bonuses.forEach((bonus) => {\n      bonus.update();\n    });\n  }\n\n  private checkCollisions(): void {\n    this.checkAsteroidBulletCollisions();\n    this.checkAsteroidShipCollisions();\n    this.checkBonusShipCollisions();\n  }\n\n  private checkAsteroidBulletCollisions(): void {\n    let { asteroids, ship, events } = this.state;\n    asteroids.forEach((asteroid) => {\n      ship.bullets.forEach((bullet) => {\n        if (haveCollided(asteroid, bullet)) {\n          let event = new ev.BulletHit(bullet, asteroid, this.state.frozen);\n          events.push(event);\n          this.processBulletHit(event);\n          this.assignScore(event);\n        }\n      });\n    });\n  }\n\n  private checkAsteroidShipCollisions(): void {\n    let { asteroids, ship, events } = this.state;\n    asteroids.forEach((asteroid) => {\n      if (haveCollided(asteroid, ship)) {\n        let event = new ev.ShipHit(asteroid, ship.shielded);\n        events.push(event);\n        this.processShipHit(event);\n        this.assignScore(event);\n      }\n    });\n  }\n\n  private checkBonusShipCollisions(): void {\n    let { bonuses, ship, events } = this.state;\n    bonuses.forEach((bonus) => {\n      if (haveCollided(bonus, ship)) {\n        let event = new ev.GotBonus(bonus);\n        events.push(event);\n        this.processGotBonus(event);\n      }\n    });\n  }\n\n  private processBulletHit(event: ev.BulletHit): void {\n    let { asteroids, ship } = this.state;\n    let asteroid = find(asteroids, { id: event.asteroidId });\n    if (asteroid) {\n      this.createLoot(asteroid.coords);\n      let nextSize = asteroid.splitSize();\n      if (nextSize && !this.state.frozen) {\n        this.spawner.spawnAsteroid({\n          count: 2,\n          size: nextSize,\n          coords: asteroid.coords,\n          notDirection: this.state.ship.direction\n        });\n      }\n      remove(asteroids, { id: event.asteroidId });\n    } else {\n      console.log('ship has collided with asteroid at previous update');\n    }\n    remove(ship.bullets, { id: event.bulletId });\n  }\n\n  private assignScore(event: ev.GameEvent): void {\n    const SCORES: Record<AsteroidSize, number> = {\n      large: 50,\n      medium: 100,\n      small: 200\n    };\n    if (event instanceof ev.BulletHit) {\n      if (this.state.frozen) {\n        // also assign score for non-split asteroid\n        if (event.size === 'large') {\n          this.state.score +=\n            SCORES.large + SCORES.medium * 2 + SCORES.small * 4;\n        } else if (event.size === 'medium') {\n          this.state.score += SCORES.medium + SCORES.small * 2;\n        } else {\n          this.state.score += SCORES.small;\n        }\n      } else {\n        this.state.score += SCORES[event.size];\n      }\n    }\n  }\n\n  private updateLevel() {\n    this.state.level = Math.floor(this.state.score / 2600) + 1;\n  }\n\n  private processShipHit(event: ev.ShipHit): void {\n    let { asteroids, ship } = this.state;\n    remove(asteroids, { id: event.asteroidId });\n    if (!ship.shielded) ship.life -= event.damage;\n  }\n\n  private processGotBonus(event: ev.GotBonus): void {\n    let { ship, bonuses } = this.state;\n    switch (event.bonusType) {\n      case 'fix':\n        ship.restoreLife();\n        break;\n      case 'shield':\n        ship.activateShield();\n        break;\n      case 'freeze':\n        this.state.frozen = true;\n        // TODO: case when freeze is already active\n        setTimeout(() => {\n          this.state.frozen = false;\n        }, 5000);\n        break;\n    }\n    remove(bonuses, { id: event.bonusId });\n  }\n\n  private createLoot(coords: Point): void {\n    let dropRate = 1 / 20;\n    let canDrop = Math.random() > 1 - dropRate;\n    canDrop && this.spawner.spawnBonus({ coords });\n    // console.log('create loot not implemented');\n  }\n}\n\nexport default GameEngine;\n","import GameEngine, { GameSnapshot } from '../core/GameEngine';\nimport { Command } from '../client/KeyController';\n\ntype ClientEvent = 'start' | 'command';\n\nclass GameServer {\n  private engine: GameEngine;\n  private container: HTMLElement;\n  constructor() {\n    this.engine = new GameEngine({ width: 4000, height: 2000 });\n    this.container = document.getElementById('root')!;\n  }\n\n  public start() {\n    this.on('start', this.handleStartRequest);\n    this.on('command', this.handleCommand);\n  }\n\n  private on(type: ClientEvent, handler: (event: CustomEvent) => any) {\n    this.container.addEventListener(type, handler.bind(this) as EventListener);\n  }\n\n  private handleStartRequest(event: CustomEvent) {\n    // create client id\n    // add engine to engines array\n    // send client id back to client\n    // start sending updates to the client\n    this.engine.startLevel(this.sendSnapshotToClient.bind(this));\n    this.container.dispatchEvent(new Event('started'));\n  }\n\n  private sendSnapshotToClient(snapshot: GameSnapshot) {\n    this.container.dispatchEvent(\n      new CustomEvent('snapshot', { detail: snapshot })\n    );\n  }\n\n  private handleCommand(event: CustomEvent) {\n    let command = event.detail as Command;\n    this.engine.state.ship[command]?.();\n  }\n}\n\nexport default GameServer;\n","import P5 from 'p5';\nimport { ShipSnapshot } from '../core/Ship';\nimport { SpawnerEtas } from '../core/Spawner';\nimport { AsteroidSnapshot } from '../core/Asteroid';\nimport { ColorsMap } from './colors';\nimport { GameSnapshot } from '../core/GameEngine';\nimport { filter } from 'lodash';\n\nconst SPACING = 20;\n\nclass GUI {\n  // private\n  private p5: P5;\n  private colors: ColorsMap;\n  // constructor\n  constructor(p5: P5, colors: ColorsMap) {\n    this.p5 = p5;\n    this.colors = colors;\n  }\n\n  public draw(snapshot: GameSnapshot) {\n    // this.drawAsteroidsInfo(snapshot.asteroids);\n    this.drawShipInfo(snapshot.ship);\n    // this.drawTimersInfo(snapshot.etas);\n    this.drawScore(snapshot);\n  }\n\n  private drawAsteroidsInfo(asteroids: AsteroidSnapshot[]): void {\n    let { p5 } = this;\n    let topLeft = { x: SPACING, y: SPACING * 4 };\n    let large = filter(asteroids, { size: 'large' }).length;\n    let medium = filter(asteroids, { size: 'medium' }).length;\n    let small = filter(asteroids, { size: 'small' }).length;\n    p5.text(`asteroids: ${large} | ${medium} | ${small}`, topLeft.x, topLeft.y);\n  }\n\n  private drawShipInfo(ship: ShipSnapshot) {\n    let { life, speed } = ship;\n    let { p5 } = this;\n    let [x, y] = [SPACING, SPACING];\n    p5.fill('white');\n    p5.noStroke();\n    p5.textAlign(p5.LEFT);\n    p5.text(`life: ${percentToString(life)}`, x, y);\n    // p5.text(`speed: ${percentToString(speed)}`, x, y + SPACING);\n  }\n\n  private drawTimersInfo(etas: SpawnerEtas) {\n    let { p5 } = this;\n    let [x, y] = [p5.windowWidth - SPACING * 5, SPACING];\n    p5.text(`Asteroids in: ${(etas.asteroids / 1000).toFixed(0)}s`, x, y);\n  }\n\n  private drawScore(snapshot: GameSnapshot): void {\n    let { p5 } = this;\n    p5.textAlign(p5.CENTER);\n    p5.text(snapshot.score, p5.windowWidth / 2, SPACING);\n    p5.text(`Level ${snapshot.level}`, p5.windowWidth / 2, SPACING * 2);\n  }\n}\n\nfunction percentToString(value: number): string {\n  return (value * 100).toFixed(0) + '%';\n}\n\nexport default GUI;\n","export type ColorCode =\n  | 'freeze'\n  | 'inactive'\n  | 'life'\n  | 'shield'\n  | 'hud'\n  | 'space';\nexport type ColorsMap = Record<ColorCode, string>;\n\nconst colors: ColorsMap = {\n  freeze: '#0CA789',\n  inactive: '#808080',\n  life: '#F24726',\n  shield: '#E6E6E6',\n  hud: '#2D9BF0',\n  space: 'black'\n};\n\nexport default colors;\n","import P5 from 'p5';\nimport { Point } from '../lib/geometry';\nimport { DrawableObject } from './Drawer';\n\nexport interface AnimationFrame extends DrawableObject {\n  image: P5.Image;\n  currentFrame: number;\n  scale: number;\n}\n\nclass Animation {\n  public isExpired: boolean = false;\n  protected currentFrame: number = 0;\n  constructor(public frameCount: number) {}\n\n  public next(): number | false {\n    if (this.currentFrame >= this.frameCount - 1) {\n      this.isExpired = true;\n      return false;\n    } else {\n      return this.currentFrame++;\n    }\n  }\n}\n\nexport class OverlayAnimation extends Animation {\n  public color: string;\n  constructor(length: number, color: string) {\n    super(length);\n    this.color = color;\n  }\n}\n\nexport class ImageAnimation extends Animation {\n  // private\n  private frames: P5.Image[];\n  private coords: Point;\n  private scale: number;\n  // constructor\n  constructor(frames: P5.Image[], coords: Point, scale: number) {\n    super(frames.length);\n    this.frames = frames;\n    this.coords = coords;\n    this.scale = scale;\n  }\n\n  public getNextFrame(): AnimationFrame | false {\n    let next = super.next();\n    if (next) {\n      return {\n        coords: this.coords,\n        direction: 0,\n        hitBoxRadius: 60,\n        orientation: 0,\n        image: this.frames[this.currentFrame],\n        currentFrame: this.currentFrame,\n        scale: this.scale\n      };\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default Animation;\n","import { GameSnapshot } from '../core/GameEngine';\nimport P5 from 'p5';\nimport { drawableCoords, Point, Rect } from '../lib/geometry';\nimport { DrawerAssets } from './Sketch';\nimport { GameObjectSnapshot } from '../core/GameObject';\nimport { DropSnapshot } from '../core/Drop';\nimport { AsteroidSnapshot } from '../core/Asteroid';\nimport GUI from './GUI';\nimport COLORS from './colors';\nimport Animation, { ImageAnimation, OverlayAnimation } from './Animation';\nimport { ShipSnapshot } from '../core/Ship';\nimport { GotBonusSnapshot, ShipHitSnapshot } from '../core/Events';\n\ninterface DrawGameObjectOptions {\n  image: P5.Image;\n  rotateDirection?: boolean;\n  rotationOffset?: number;\n}\n\ninterface DrawerOptions {\n  p5: P5;\n  assets: DrawerAssets;\n  rootElementId: string;\n  showHitBoxes?: boolean;\n}\n\nexport interface DrawableObject {\n  coords: Point;\n  hitBoxRadius: number;\n  orientation: number;\n  direction: number;\n}\n\ninterface Star {\n  x: number;\n  y: number;\n  radius: number;\n}\n\nclass Drawer {\n  // private\n  private p5: P5;\n  private stars: Star[] = [];\n  private assets: DrawerAssets;\n  private showHitBoxes: boolean;\n  private screen: Rect;\n  private gui: GUI;\n  private snapshot?: GameSnapshot;\n  private animations: Animation[] = [];\n  // constructor\n  constructor(options: DrawerOptions) {\n    this.p5 = options.p5;\n    const canvas = this.p5.createCanvas(\n      this.p5.windowWidth,\n      this.p5.windowHeight\n    );\n    canvas.parent(options.rootElementId);\n    this.assets = options.assets;\n    this.showHitBoxes = options.showHitBoxes || false;\n    this.screen = {\n      width: this.p5.windowWidth,\n      height: this.p5.windowHeight\n    };\n    this.gui = new GUI(this.p5, COLORS);\n    // console.log('drawer assets', this.assets);\n  }\n\n  public updateSnapshot(snapshot: GameSnapshot) {\n    if (!snapshot) return;\n    if (!this.snapshot) {\n      this.createStars(snapshot.world, 200);\n    }\n    this.snapshot = snapshot;\n  }\n\n  public drawScreen(): void {\n    if (this.snapshot) {\n      switch (this.snapshot.status) {\n        case 'playing':\n          this.drawGameScreen(this.snapshot);\n          break;\n        case 'lost':\n          this.drawGameOverScreen(this.snapshot.score);\n          break;\n        case 'won':\n          this.drawGameWonScreen(this.snapshot.score);\n          break;\n        case 'idle':\n          console.log('idle');\n          break;\n      }\n    }\n  }\n\n  public resizeScreen(width: number, height: number): void {\n    this.p5.resizeCanvas(width, height);\n    this.screen = { width, height };\n  }\n\n  private drawGameScreen(snapshot: GameSnapshot): void {\n    this.drawEnvironment();\n    this.drawGameObjects(snapshot);\n    this.createNewAnimations(snapshot);\n    this.drawAnimations();\n    this.gui.draw(snapshot);\n  }\n\n  private drawGameOverScreen(score: number): void {\n    let { p5 } = this;\n    p5.background(COLORS.space);\n    p5.fill('yellow');\n    p5.textAlign(p5.CENTER);\n    p5.text('GAME OVER', p5.windowWidth / 2, p5.windowHeight / 2);\n    p5.text(score, p5.windowWidth / 2, p5.windowHeight / 2 + 30);\n    p5.text(\n      'press F5 to try again',\n      p5.windowWidth / 2,\n      p5.windowHeight / 2 + 60\n    );\n    p5.textAlign(p5.LEFT);\n  }\n\n  private drawGameWonScreen(score: number): void {\n    let { p5 } = this;\n    p5.background(COLORS.space);\n    p5.fill('yellow');\n    p5.textAlign(p5.CENTER);\n    p5.text('GAME WON!', p5.windowWidth / 2, p5.windowHeight / 2);\n    p5.text(score, p5.windowWidth / 2, p5.windowHeight / 2 + 30);\n    p5.text(\n      'press F5 to try again',\n      p5.windowWidth / 2,\n      p5.windowHeight / 2 + 60\n    );\n    p5.textAlign(p5.LEFT);\n  }\n\n  private drawEnvironment(): void {\n    let { p5, stars } = this;\n    p5.background(COLORS.space);\n    this.drawStars(stars);\n  }\n\n  private drawGameObjects(snapshot: GameSnapshot): void {\n    let { ship, bonuses, asteroids } = snapshot;\n    this.drawBullets(ship.bullets);\n    this.drawShip(ship);\n    this.drawBonuses(bonuses);\n    this.drawAsteroids(asteroids, snapshot.frozen);\n  }\n\n  private createNewAnimations(snapshot: GameSnapshot): void {\n    // save new animations\n    snapshot.events.forEach((event) => {\n      // explosion animation\n      if (event.type !== 'GOT_BONUS') {\n        let frames = this.assets[\n          snapshot.frozen ? 'shatterAnimation' : 'explosionAnimation'\n        ];\n        // TODO: adapt explosion size to event\n        this.animations.push(new ImageAnimation(frames, event.coords, 1));\n        // overlay animation\n        if (event.type === 'SHIP_HIT') {\n          let myEvent = event as ShipHitSnapshot;\n          if (!myEvent.shielded) {\n            this.animations.push(new OverlayAnimation(30, 'red'));\n          }\n        }\n      } else {\n        // got bonus\n        let myEvent = event as GotBonusSnapshot;\n        let color: string;\n        if (myEvent.bonusType === 'shield') color = 'green';\n        else if (myEvent.bonusType === 'freeze') color = 'blue';\n        else color = 'white';\n        this.animations.push(new OverlayAnimation(30, color));\n      }\n    });\n  }\n\n  private drawAnimations(): void {\n    let { p5 } = this;\n    this.animations.forEach((animation) => {\n      // explosion\n      if (animation instanceof ImageAnimation) {\n        let drawable = animation.getNextFrame();\n        if (drawable) {\n          // console.log(drawable);\n          this.drawGameObject(drawable, { image: drawable.image });\n        }\n      } else if (animation instanceof OverlayAnimation) {\n        // overlay\n        let frame = animation.next();\n        if (frame) {\n          let alpha =\n            ((animation.frameCount - frame) / animation.frameCount) * 128;\n          let color = animation.color;\n          if (color === 'red') p5.fill(128, 0, 0, alpha);\n          else if (color === 'green') p5.fill(0, 128, 0, alpha);\n          else if (color === 'blue') p5.fill(0, 200, 255, alpha);\n          else p5.fill(128, 128, 128, alpha);\n          p5.rectMode(p5.CORNER);\n          p5.noStroke();\n          p5.rect(0, 0, this.screen.width, this.screen.height);\n        }\n      }\n    });\n    // remove expired animations\n    this.animations = this.animations.filter((animation) => {\n      return !animation.isExpired;\n    });\n  }\n\n  private createStars(world: Rect, amount: number): void {\n    for (let i = 0; i < amount; i++) {\n      this.stars.push({\n        x: Math.random() * world.width,\n        y: Math.random() * world.height,\n        radius: Math.random() > 0.5 ? 2 : 1\n      });\n    }\n  }\n\n  private drawableCoords(object: Point): Point | undefined {\n    return drawableCoords(\n      object,\n      this.snapshot?.ship.coords || { x: 0, y: 0 },\n      this.screen,\n      this.snapshot?.world || { width: 1000, height: 1000 }\n    );\n  }\n\n  private drawStars(stars: Star[]): void {\n    let { p5 } = this;\n    p5.noStroke();\n    p5.fill('white');\n    stars.forEach((star) => {\n      let coords = this.drawableCoords(star);\n      coords && p5.circle(coords.x, coords.y, star.radius);\n    });\n  }\n\n  private drawBonuses(bonuses: DropSnapshot[]): void {\n    bonuses.forEach((bonus) => {\n      this.drawGameObject(bonus, { image: this.assets.images[bonus.dropType] });\n    });\n  }\n\n  private drawAsteroids(asteroids: AsteroidSnapshot[], frozen: boolean): void {\n    asteroids.forEach((asteroid) => {\n      this.drawGameObject(asteroid, {\n        image: this.assets.images[`${frozen ? 'frozen-' : ''}asteroid`]\n      });\n    });\n  }\n\n  private drawGameObject(\n    object: DrawableObject,\n    options: DrawGameObjectOptions\n  ): boolean {\n    let { p5 } = this;\n    let coords = this.drawableCoords(object.coords);\n    if (!coords) return false;\n    let side = object.hitBoxRadius * 2;\n    p5.imageMode(p5.CENTER);\n    p5.push();\n    p5.translate(coords.x, coords.y);\n    p5.rotate(object.orientation);\n    p5.rotate(options.rotateDirection ? object.direction : 0);\n    p5.rotate(options.rotationOffset || 0);\n    p5.image(options.image, 0, 0, side, side);\n    if (this.showHitBoxes) {\n      p5.noFill();\n      p5.stroke('red');\n      p5.circle(0, 0, side);\n    }\n    p5.pop();\n    return true;\n  }\n\n  private drawShip(ship: ShipSnapshot): void {\n    let { p5 } = this;\n    // tail\n    ship.tail.forEach((point, i) => {\n      let size = (1 - (ship.tail.length - i) / ship.tail.length + 1) * 10;\n      let alpha = (1 - (ship.tail.length - i) / ship.tail.length) * 255;\n      p5.noStroke();\n      p5.fill(50, 50, 50, alpha);\n      let coords = this.drawableCoords(point);\n      coords && p5.circle(coords.x, coords.y, size);\n    });\n    // shield\n    if (ship.shielded) {\n      p5.stroke(0, 255, 0, 128);\n      p5.fill(0, 55, 0, 128);\n      p5.circle(p5.windowWidth / 2, p5.windowHeight / 2, 80);\n    }\n    // ship\n    this.drawGameObject(ship, {\n      image: this.assets.images.ship,\n      rotateDirection: true,\n      rotationOffset: Math.PI / 2\n    });\n  }\n\n  private drawBullets(bullets: GameObjectSnapshot[]): void {\n    bullets.forEach((bullet) => {\n      this.drawGameObject(bullet, {\n        image: this.assets.images.bullet\n      });\n    });\n  }\n}\n\nexport default Drawer;\n","import P5 from 'p5';\nimport { ImageAsset } from './Sketch';\n\nfunction loadImage(p5: P5, path: string): Promise<P5.Image> {\n  return new Promise((resolve, reject) => {\n    p5.loadImage(\n      path,\n      (image: P5.Image) => resolve(image),\n      (error) => reject(error)\n    );\n  });\n}\n\nfunction loadMultipleImages(\n  p5: P5,\n  howMany: number,\n  pathCreator: (index: number) => string\n): Promise<P5.Image[]> {\n  let promises = [];\n  for (let i = 0; i <= howMany; i++) {\n    let path = pathCreator(i);\n    promises.push(loadImage(p5, path));\n  }\n  return Promise.all(promises);\n}\n\nfunction loadExplosionAnimation(p5: P5): Promise<P5.Image[]> {\n  return loadMultipleImages(p5, 31, (index: number) => {\n    let twoDigitsPadded = index.toString().padStart(2, '0');\n    return `./assets/explosion/expl_06_00${twoDigitsPadded}.png`;\n  });\n}\n\nfunction loadShatterAnimation(p5: P5): Promise<P5.Image[]> {\n  return loadMultipleImages(p5, 17, (index: number) => {\n    return `./assets/shatter/Blue Ring Explosion${index + 1}.png`;\n  });\n}\n\nfunction loadImageAssets(p5: P5): Promise<Record<string, P5.Image>> {\n  let images: Record<string, P5.Image> = {};\n  let names: ImageAsset[] = [\n    'asteroid',\n    'ship',\n    'fix',\n    'shield',\n    'freeze',\n    'bullet',\n    'frozen-asteroid'\n  ];\n  return new Promise(async (resolve, reject) => {\n    try {\n      let results = await Promise.all(\n        names.map((name) => {\n          return loadImage(p5, `./assets/${name}.png`);\n        })\n      );\n      results.forEach((image, i) => {\n        images[names[i]] = image;\n      });\n      resolve(images);\n    } catch (error) {\n      reject('Failed to load image assets');\n    }\n  });\n}\n\nexport async function loadAssets(p5: P5) {\n  return {\n    images: await loadImageAssets(p5),\n    explosionAnimation: await loadExplosionAnimation(p5),\n    shatterAnimation: await loadShatterAnimation(p5)\n  };\n}\n","import P5 from 'p5';\nimport { GameSnapshot } from '../core/GameEngine';\nimport KeyController from './KeyController';\nimport Drawer from './Drawer';\nimport { loadAssets } from './assets-loaders';\n\nexport type ImageAsset =\n  | 'asteroid'\n  | 'ship'\n  | 'fix'\n  | 'shield'\n  | 'freeze'\n  | 'frozen-asteroid'\n  | 'bullet';\n\nexport type AnimationType = 'explosion';\n\nexport interface DrawerAssets {\n  // images: Record<ImageAsset, P5.Image>;\n  images: any;\n  explosionAnimation: P5.Image[];\n  shatterAnimation: P5.Image[];\n}\n\ninterface SnapshotEvent extends CustomEvent {\n  detail: GameSnapshot;\n}\n\nconst rootElementId = 'root';\n\nconst Sketch = (p5: P5) => {\n  var keyController = new KeyController(rootElementId);\n  var drawer: Drawer;\n  let loaded = false;\n  var assets: DrawerAssets = {\n    images: {},\n    explosionAnimation: [],\n    shatterAnimation: []\n  };\n  var lastSnapshot: GameSnapshot;\n\n  p5.preload = async () => {};\n\n  p5.setup = async () => {\n    assets = await loadAssets(p5);\n    // listenForSnapshots\n    let container = document.getElementById(rootElementId)!;\n    container.addEventListener('snapshot', ((event: SnapshotEvent) => {\n      lastSnapshot = event.detail;\n    }) as EventListener);\n    // askToStartGame\n    setTimeout(() => {\n      container.dispatchEvent(new Event('start'));\n    }, 1000);\n    p5.frameRate(60);\n    drawer = new Drawer({\n      p5,\n      assets,\n      rootElementId,\n      showHitBoxes: false\n    });\n    let $loading = document.getElementById('loading')!;\n    document.body.removeChild($loading);\n    loaded = true;\n  };\n\n  p5.keyPressed = () => {\n    keyController.pressed(p5.keyCode);\n  };\n\n  p5.windowResized = () => {\n    console.log('resized');\n    loaded && drawer.resizeScreen(p5.windowWidth, p5.windowHeight);\n  };\n\n  p5.draw = () => {\n    if (loaded) {\n      drawer.updateSnapshot(lastSnapshot);\n      drawer.drawScreen();\n    }\n  };\n};\n\nexport default Sketch;\n","import './style.css';\nimport GameServer from './server/GameServer';\nimport Sketch from './client/Sketch';\nimport P5 from 'p5';\n\nlet server = new GameServer();\nserver.start();\n\nnew P5(Sketch);\n"],"sourceRoot":""}