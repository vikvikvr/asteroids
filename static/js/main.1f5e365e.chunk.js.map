{"version":3,"sources":["core/Entity.ts","core/GameObject.ts","core/Bullet.ts","core/Ship.ts","lib/geometry.ts","core/Events.ts","client/KeyController.ts","core/Drop.ts","core/Asteroid.ts","core/Spawner.ts","core/GameEngine.ts","server/GameServer.ts","client/GUI.ts","client/colors.ts","client/Animation.ts","client/Drawer.ts","client/Sketch.ts","index.ts"],"names":["Entity","options","coords","speed","acceleration","orientation","direction","world","rotationSpeed","angularSpeed","targetDirection","this","width","height","x","y","times","i","updatePosition","approachTargetDirection","Math","min","max","cos","sin","teleportOffEdges","GameObject","id","type","hitBoxRadius","life","isExpired","expiresAt","uuidv4","Date","now","duration","Infinity","Bullet","startingDirection","PI","Ship","bullets","fuel","ammo","cargo","fix","rotationStep","rightRotations","leftRotations","ACC_SPRINTS","DEC_SPRINTS","FUEL_CONSUMPTION","sprints","MAX_SPEED","remove","forEach","bullet","update","consumeFuel","useSprintsToAccelerateForward","useSprintsToAccelerateBackwards","decelerateBackToZero","setTargetDirection","getComputedDirection","makeBullet","push","map","b","serialize","Boolean","find","mult","abs","steps","distance","obj1","obj2","deltaX","deltaY","sqrt","haveCollided","randomCoordsFarFrom","object","distFromObject","hitBoxMultiplier","tries","Error","random","notDirection","coneAngle","dir","tryPuttingValueInsideRange","value","adjustment","isBetween","drawableCoords","origin","screen","showAlways","screenCoords","result","mostVisibleCoords","Keys","GameEvent","ShipHit","asteroid","asteroidId","damage","BulletHit","bulletId","GotBonus","bonus","bonusId","bonusType","dropType","Drop","rotatingRight","rotationCone","changeRotationDirection","speeds","large","medium","small","hitBoxes","damages","Asteroid","sign","size","Spawner","state","nextBonusSpawnAt","nextAsteroidSpawnAt","asteroidTimer","bonusTimer","HIT_BOX_MULTIPLIER","CONE_ANGLE","asteroids","bonuses","added","count","dropOptions","makeDropOptions","allowDropSpawn","drop","asteroidOptions","makeAsteroidOptions","ms","setInterval","spawnAsteroid","spawnBonus","ship","filter","length","GameEngine","rect","status","spawner","gameOverCallback","gameWonCallback","snapshotTimeout","events","callback","asteroidEvery","bonusEvery","createSnapshot","updateAsteroids","updateBonuses","checkCollisions","checkGameWon","checkGameLost","countAsteroids","etas","getEtas","snapshot","createdAt","a","e","clearInterval","console","log","event","ev","processBulletHit","processShipHit","processGotBonus","createLoot","nextSize","splitSize","collectBonus","GameServer","engine","container","document","getElementById","on","handleStartRequest","handleCommand","handler","addEventListener","bind","startLevel","sendSnapshotToClient","dispatchEvent","Event","CustomEvent","detail","command","turnLeft","turnRight","accelerate","decelerate","fire","useBonus","KeyController","rootElementId","keyCode","ARROW_LEFT","sendCommand","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","SPACE_BAR","LETTER_E","LETTER_Q","LETTER_W","SPACING","percentToString","toFixed","GUI","p5","colors","anchors","windowWidth","windowHeight","timers","topLeft","text","fill","noStroke","suggestions","keys","activeColors","translate","rectMode","CENTER","textAlign","currentX","stroke","inactive","pop","hud","space","Animation","frames","frameCount","image","Drawer","stars","assets","showHitBoxes","gui","animations","createCanvas","parent","COLORS","createStars","gameScreen","gameOverScreen","gameWonScreen","drawEnvironment","drawGameObjects","drawAnimations","draw","background","LEFT","drawStars","drawBullets","drawShip","drawBonuses","drawAsteroids","explosionAnimation","animation","drawable","next","drawGameObject","amount","radius","star","circle","images","side","imageMode","rotate","rotateDirection","rotationOffset","noFill","loadImage","path","Promise","resolve","reject","error","loadExplosionAnimation","twoDigitsPadded","toString","padStart","img","loadImageAssets","Sketch","drawer","lastSnapshot","keyController","preload","setup","setTimeout","frameRate","keyPressed","pressed","updateSnapshot","start","P5"],"mappings":"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","file":"static/js/main.1f5e365e.chunk.js","sourcesContent":["import { Point, Rect } from '../lib/geometry';\n\nexport type EntityOptions = {\n  world: Rect;\n  coords: Point;\n  speed: number;\n  acceleration: number;\n  direction: number;\n  angularSpeed: number;\n  orientation: number;\n  rotationSpeed: number;\n  interpolationSteps: number;\n};\n\nexport interface EntitySnapshot {\n  acceleration: number;\n  coords: Point;\n  speed: number;\n  orientation: number;\n  direction: number;\n  world: Rect;\n  rotationSpeed: number;\n}\n\nclass Entity {\n  // public\n  public coords: Point;\n  public speed: number;\n  public acceleration: number;\n  public orientation: number;\n  public direction: number;\n  public world: Rect;\n  public rotationSpeed: number;\n  // private\n  private angularSpeed: number;\n  private targetDirection: number;\n\n  constructor(options: Partial<EntityOptions> = {}) {\n    this.world = options.world || { width: 1000, height: 1000 };\n    this.coords = { x: options?.coords?.x || 0, y: options?.coords?.y || 0 };\n    this.speed = options.speed || 0;\n    this.acceleration = options.acceleration || 0;\n    this.direction = options.direction || 0;\n    this.targetDirection = this.direction;\n    this.orientation = options.orientation || 0;\n    this.angularSpeed = options.angularSpeed || 0;\n    this.rotationSpeed = options.rotationSpeed || 0;\n  }\n\n  protected serialize(): EntitySnapshot {\n    return {\n      coords: {...this.coords},\n      speed: this.speed,\n      acceleration: this.acceleration,\n      orientation: this.orientation,\n      direction: this.direction,\n      world: this.world,\n      rotationSpeed: this.rotationSpeed\n    };\n  }\n\n  protected changeRotationDirection() {\n    this.rotationSpeed *= -1;\n  }\n\n  protected update(times: number = 1): void {\n    for (let i = 0; i < times; i++) {\n      this.updatePosition();\n      this.approachTargetDirection();\n      this.orientation += this.rotationSpeed;\n    }\n  }\n\n  protected setTargetDirection(direction: number): void {\n    this.targetDirection = direction;\n  }\n\n  private approachTargetDirection(): void {\n    if (this.targetDirection > this.direction) {\n      this.direction = Math.min(\n        this.targetDirection,\n        this.direction + this.angularSpeed\n      );\n    } else if (this.targetDirection < this.direction) {\n      this.direction = Math.max(\n        this.targetDirection,\n        this.direction - this.angularSpeed\n      );\n    }\n  }\n\n  private updatePosition(): void {\n    this.coords.x += Math.cos(this.direction) * this.speed;\n    this.coords.y += Math.sin(this.direction) * this.speed;\n    this.teleportOffEdges();\n  }\n\n  private teleportOffEdges(): void {\n    if (this.coords.x > this.world.width) this.coords.x -= this.world.width;\n    if (this.coords.x < 0) this.coords.x += this.world.width;\n    if (this.coords.y > this.world.height) this.coords.y -= this.world.height;\n    if (this.coords.y < 0) this.coords.y += this.world.height;\n  }\n}\n\nexport default Entity;\n","import Entity, { EntityOptions, EntitySnapshot } from './Entity';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport type GameObjectType = 'ship' | 'asteroid' | 'bullet' | 'drop';\n\nexport interface GameObjectOptions extends Partial<EntityOptions> {\n  type?: GameObjectType;\n  hitBoxRadius?: number;\n  duration?: number;\n}\n\nexport interface GameObjectSnapshot extends EntitySnapshot {\n  id: string;\n  type: GameObjectType;\n  hitBoxRadius: number;\n  life: number;\n  isExpired: boolean;\n}\n\nclass GameObject extends Entity {\n  // public\n  public id: string;\n  public type: GameObjectType;\n  public hitBoxRadius: number;\n  public life: number;\n  public isExpired: boolean;\n  // private\n  private expiresAt: number;\n\n  constructor(options: GameObjectOptions = {}) {\n    super({ ...options });\n    this.id = uuidv4();\n    this.type = options.type || 'asteroid';\n    this.hitBoxRadius = options.hitBoxRadius || 50;\n    this.isExpired = false;\n    this.life = 1;\n    this.expiresAt = Date.now() + (options.duration || Infinity);\n  }\n\n  protected serialize(): GameObjectSnapshot {\n    return {\n      ...super.serialize(),\n      id: this.id,\n      type: this.type,\n      hitBoxRadius: this.hitBoxRadius,\n      life: this.life,\n      isExpired: this.isExpired\n    };\n  }\n\n  protected update(): void {\n    super.update();\n    this.isExpired = Date.now() > this.expiresAt;\n  }\n}\n\nexport default GameObject;\n","import GameObject, {\n  GameObjectOptions,\n  GameObjectSnapshot\n} from './GameObject';\n\ntype BulletOptions = Omit<\n  GameObjectOptions,\n  'type' | 'hitBoxRadius' | 'duration'\n>;\n\nexport type BulletSnapshot = GameObjectSnapshot;\n\nclass Bullet extends GameObject {\n  constructor(options: BulletOptions = {}) {\n    super({\n      ...options,\n      type: 'bullet',\n      hitBoxRadius: 3,\n      duration: 2000\n    });\n  }\n\n  public update() {\n    super.update();\n  }\n\n  public serialize(): BulletSnapshot {\n    return super.serialize();\n  }\n}\n\nexport default Bullet;\n","import GameObject, { GameObjectSnapshot } from './GameObject';\nimport { find, remove } from 'lodash';\nimport { EntityOptions } from './Entity';\nimport Bullet, { BulletSnapshot } from './Bullet';\nimport { DropType } from './Drop';\n\nexport type CargoMap = Record<DropType, number>;\n\nconst startingDirection = -Math.PI / 2;\n\nexport interface ShipSnapshot extends GameObjectSnapshot {\n  bullets: BulletSnapshot[];\n  fuel: number;\n  ammo: number;\n  cargo: CargoMap;\n}\n\nclass Ship extends GameObject {\n  // public\n  public bullets: Bullet[] = [];\n  public fuel = 1;\n  public ammo = 100;\n  public cargo: CargoMap = { ammo: 0, fix: 0, fuel: 0 };\n  // private\n  private rotationStep = Math.PI / 6;\n  private startingDirection = startingDirection;\n  private rightRotations = 0;\n  private leftRotations = 0;\n  private ACC_SPRINTS = 30;\n  private DEC_SPRINTS = 15;\n  private FUEL_CONSUMPTION = 1 / 3_000;\n  private sprints = 0;\n  // readonly\n  readonly MAX_SPEED = 4;\n\n  constructor(options: Partial<EntityOptions> = {}) {\n    super({\n      ...options,\n      type: 'ship',\n      hitBoxRadius: 30,\n      direction: startingDirection,\n      acceleration: 1 / 10,\n      angularSpeed: Math.PI / 3 / 20\n    });\n  }\n\n  public update(times = 1): void {\n    for (let i = 0; i < times; i++) {\n      super.update();\n      remove(this.bullets, { isExpired: true });\n      this.bullets.forEach((bullet) => bullet.update());\n      this.consumeFuel();\n\n      if (this.sprints > 0) {\n        this.useSprintsToAccelerateForward();\n      } else if (this.sprints < 0) {\n        this.useSprintsToAccelerateBackwards();\n      } else {\n        this.decelerateBackToZero();\n      }\n    }\n  }\n\n  public turnLeft(): void {\n    this.setTargetDirection(this.getComputedDirection() - this.rotationStep);\n    this.leftRotations++;\n  }\n\n  public turnRight(): void {\n    this.setTargetDirection(this.getComputedDirection() + this.rotationStep);\n    this.rightRotations++;\n  }\n\n  public accelerate(times = 1): void {\n    for (let i = 0; i < times; i++) {\n      if (this.fuel > 0) {\n        if (this.sprints > 0) {\n          this.sprints += this.ACC_SPRINTS;\n        } else {\n          this.sprints = this.ACC_SPRINTS;\n        }\n      }\n    }\n  }\n\n  public decelerate(times = 1): void {\n    for (let i = 0; i < times; i++) {\n      if (this.fuel > 0) {\n        if (this.sprints < 0) {\n          this.sprints += -this.DEC_SPRINTS;\n        } else {\n          this.sprints = -this.DEC_SPRINTS;\n        }\n      }\n    }\n  }\n\n  public fire(): Bullet | null {\n    if (!this.ammo) return null;\n\n    let bullet = this.makeBullet();\n    this.bullets.push(bullet);\n    this.ammo--;\n\n    return bullet;\n  }\n\n  public collectBonus(type: DropType): void {\n    this.cargo[type]++;\n  }\n\n  public useBonus(type: DropType): boolean {\n    if (!this.cargo[type]) return false;\n\n    switch (type) {\n      case 'ammo':\n        if (this.ammo === 100) return false;\n        this.ammo = 100;\n        break;\n      case 'fix':\n        if (this.life === 1) return false;\n        this.life = 1;\n        break;\n      case 'fuel':\n        if (this.fuel === 1) return false;\n        this.fuel = 1;\n        break;\n    }\n\n    this.cargo[type]--;\n    return true;\n  }\n\n  public serialize(): ShipSnapshot {\n    return {\n      ...super.serialize(),\n      bullets: this.bullets.map((b) => b.serialize()),\n      fuel: this.fuel,\n      ammo: this.ammo,\n      cargo: { ...this.cargo }\n    };\n  }\n\n  private hasBullet(id: string): boolean {\n    return Boolean(find(this.bullets, { id }));\n  }\n\n  private decelerateBackToZero(): void {\n    let mult: number;\n    if (this.speed > 0) {\n      mult = Math.abs(this.MAX_SPEED - this.speed) / 2;\n      this.speed = Math.max(this.speed - this.acceleration * mult, 0);\n    } else if (this.speed < 0) {\n      mult = Math.abs(-this.MAX_SPEED - this.speed) / 2;\n      this.speed = Math.min(this.speed + this.acceleration * mult, 0);\n    }\n  }\n\n  private useSprintsToAccelerateForward(): void {\n    let mult = (Math.abs(this.MAX_SPEED - this.speed) / 2) ** 2;\n    this.speed += this.acceleration * mult;\n    this.sprints--;\n  }\n\n  private useSprintsToAccelerateBackwards(): void {\n    let mult = Math.abs(-this.MAX_SPEED - this.speed) / 2;\n    this.speed -= this.acceleration * mult;\n    this.sprints++;\n  }\n\n  private consumeFuel() {\n    if (this.speed !== 0) {\n      this.fuel = this.fuel - this.FUEL_CONSUMPTION;\n    }\n  }\n\n  private getComputedDirection(): number {\n    let steps = (-this.leftRotations + this.rightRotations) * this.rotationStep;\n    return this.startingDirection + steps;\n  }\n\n  private makeBullet(): Bullet {\n    return new Bullet({\n      world: this.world,\n      direction: this.direction,\n      coords: this.coords,\n      speed: Math.max(this.speed, 0) + 6\n    });\n  }\n}\n\nexport default Ship;\n","export type Point = {\n  x: number;\n  y: number;\n};\n\nexport type Rect = {\n  width: number;\n  height: number;\n};\n\nexport type Collidable = {\n  hitBoxRadius: number;\n  coords: Point;\n};\n\nexport function centerOf(rect: Rect): Point {\n  return {\n    x: rect.width / 2,\n    y: rect.height / 2\n  };\n}\n\nexport function distance(obj1: Point, obj2: Point): number {\n  let deltaX = obj1.x - obj2.x;\n  let deltaY = obj1.y - obj2.y;\n  return Math.sqrt(deltaX ** 2 + deltaY ** 2);\n}\n\nexport function haveCollided(obj1: Collidable, obj2: Collidable): boolean {\n  let dist = distance(obj1.coords, obj2.coords);\n  let minDistance = obj1.hitBoxRadius + obj2.hitBoxRadius;\n  return dist < minDistance;\n}\n\nexport function randomCoordsFarFrom(\n  object: Collidable,\n  world: Rect,\n  hitBoxMultiplier = 2\n): Point {\n  let distFromObject, coords;\n  let tries = 0;\n  do {\n    if (tries > 100) throw Error('Could not create randomCoordsFarFrom');\n    tries++;\n    coords = {\n      x: Math.random() * world.width,\n      y: Math.random() * world.height\n    };\n    distFromObject = distance(coords, object.coords);\n  } while (distFromObject < object.hitBoxRadius * hitBoxMultiplier);\n\n  return coords;\n}\n\nexport function notDirection(\n  direction: number,\n  coneAngle: number,\n  random: () => number\n): number {\n  if (direction < 0) direction += Math.PI;\n\n  let dir: number;\n  do {\n    dir = random() * Math.PI * 2;\n  } while (Math.abs(dir - direction) <= coneAngle / 2);\n  return dir;\n}\n\nfunction tryPuttingValueInsideRange(\n  value: number,\n  adjustment: number,\n  max: number,\n  min = 0\n): number {\n  if (value < min) {\n    return value + adjustment;\n  } else if (value > max) {\n    return value - adjustment;\n  } else {\n    return value;\n  }\n}\n\nfunction mostVisibleCoords(\n  screenCoords: Point,\n  world: Rect,\n  screen: Rect\n): Point {\n  let bestX = tryPuttingValueInsideRange(\n    screenCoords.x,\n    world.width,\n    screen.width\n  );\n  let bestY = tryPuttingValueInsideRange(\n    screenCoords.y,\n    world.height,\n    screen.height\n  );\n\n  return {\n    x: bestX,\n    y: bestY\n  };\n}\n\nfunction isBetween(value: number, max: number, min = 0): boolean {\n  return value >= min && value <= max;\n}\n\n// assuming origin is always drawn in the middle of the screen\nexport function drawableCoords(\n  object: Point,\n  origin: Point,\n  screen: Rect,\n  world: Rect,\n  showAlways?: boolean\n): Point | undefined {\n  let deltaX = object.x - origin.x;\n  let deltaY = object.y - origin.y;\n  let screenX = screen.width / 2 + deltaX;\n  let screenY = screen.height / 2 + deltaY;\n  let screenCoords = { x: screenX, y: screenY };\n\n  if (showAlways) return screenCoords;\n\n  let result = mostVisibleCoords(screenCoords, world, screen);\n  if (!isBetween(result.x, screen.width)) return undefined;\n  if (!isBetween(result.y, screen.height)) return undefined;\n  return result;\n}\n","import { v4 as uuidv4 } from 'uuid';\nimport { Point } from '../lib/geometry';\nimport Asteroid, { AsteroidDamage } from './Asteroid';\nimport Bullet from './Bullet';\nimport Drop, { DropType } from './Drop';\n\nexport type GameEventType = 'BULLET_HIT' | 'SHIP_HIT' | 'GOT_BONUS';\n\nexport interface GameEventSnapshot {\n  type: GameEventType;\n  id: string;\n  coords: Point;\n}\n\nexport class GameEvent {\n  // public\n  public type: GameEventType;\n  public id: string;\n  public coords: Point;\n  // constructor\n  constructor(type: GameEventType, coords: Point) {\n    this.type = type;\n    this.id = uuidv4();\n    this.coords = { ...coords };\n  }\n\n  public serialize(): GameEventSnapshot {\n    return {\n      type: this.type,\n      id: this.id,\n      coords: { ...this.coords }\n    };\n  }\n}\n\nexport class ShipHit extends GameEvent {\n  public asteroidId: string;\n  public damage: AsteroidDamage;\n  constructor(asteroid: Asteroid) {\n    super('SHIP_HIT', asteroid.coords);\n    this.asteroidId = asteroid.id;\n    this.damage = asteroid.damage;\n  }\n}\n\nexport class BulletHit extends GameEvent {\n  public bulletId: string;\n  public asteroidId: string;\n  constructor(bullet: Bullet, asteroid: Asteroid) {\n    super('BULLET_HIT', bullet.coords);\n    this.bulletId = bullet.id;\n    this.asteroidId = asteroid.id;\n  }\n}\n\nexport class GotBonus extends GameEvent {\n  public bonusId: string;\n  public bonusType: DropType;\n  constructor(bonus: Drop) {\n    super('GOT_BONUS', bonus.coords);\n    this.bonusId = bonus.id;\n    this.bonusType = bonus.dropType;\n  }\n}\n","export type Command =\n  | 'turnLeft'\n  | 'turnRight'\n  | 'accelerate'\n  | 'decelerate'\n  | 'fire'\n  | 'useFix'\n  | 'useFuel'\n  | 'useAmmo';\n\nenum Keys {\n  ARROW_LEFT = 37,\n  ARROW_RIGHT = 39,\n  ARROW_UP = 38,\n  ARROW_DOWN = 40,\n  SPACE_BAR = 32,\n  LETTER_E = 69,\n  LETTER_H = 72,\n  LETTER_P = 80,\n  LETTER_Q = 81,\n  LETTER_W = 87\n}\n\nclass KeyController {\n  constructor(private rootElementId: string) {}\n\n  public pressed(keyCode: number) {\n    switch (keyCode) {\n      case Keys.ARROW_LEFT:\n        return this.sendCommand('turnLeft');\n      case Keys.ARROW_RIGHT:\n        return this.sendCommand('turnRight');\n      case Keys.ARROW_UP:\n        return this.sendCommand('accelerate');\n      case Keys.ARROW_DOWN:\n        return this.sendCommand('decelerate');\n      case Keys.SPACE_BAR:\n        return this.sendCommand('fire');\n      case Keys.LETTER_E:\n        return this.sendCommand('useFix');\n      case Keys.LETTER_Q:\n        return this.sendCommand('useFuel');\n      case Keys.LETTER_W:\n        return this.sendCommand('useAmmo');\n    }\n  }\n\n  private sendCommand(type: Command): void {\n    let container = document.getElementById(this.rootElementId)!;\n    container.dispatchEvent(new CustomEvent('command', { detail: type }));\n  }\n}\n\nexport default KeyController;\n","import GameObject, {\n  GameObjectOptions,\n  GameObjectSnapshot\n} from './GameObject';\n\n// aliases\nexport type DropType = 'fix' | 'fuel' | 'ammo';\n\n// constants\nexport const droppable: DropType[] = ['fix', 'fuel', 'ammo'];\n\n// interfaces\nexport interface DropOptions\n  extends Omit<GameObjectOptions, 'hitBoxRadius' | 'type'> {\n  type: DropType;\n}\n\nexport interface DropSnapshot extends GameObjectSnapshot {\n  dropType: DropType;\n}\n\nclass Drop extends GameObject {\n  // public\n  public dropType: DropType;\n  // private\n  private rotatingRight: boolean = true;\n  private rotationCone: number = Math.PI / 12;\n  // constructor\n  constructor(options: DropOptions) {\n    super({\n      ...options,\n      hitBoxRadius: 30,\n      type: 'drop',\n      rotationSpeed: Math.PI / 100\n    });\n    this.dropType = options.type;\n  }\n\n  public update() {\n    super.update();\n    if (this.rotatingRight) {\n      if (this.orientation > this.rotationCone) {\n        this.changeRotationDirection();\n        this.rotatingRight = false;\n      }\n    } else {\n      if (this.orientation < -this.rotationCone) {\n        this.changeRotationDirection();\n        this.rotatingRight = true;\n      }\n    }\n  }\n\n  public serialize(): DropSnapshot {\n    return {\n      ...super.serialize(),\n      dropType: this.dropType\n    };\n  }\n}\n\nexport default Drop;\n","import GameObject, {\n  GameObjectOptions,\n  GameObjectSnapshot\n} from './GameObject';\n\n// aliases\nexport type AsteroidSize = 'large' | 'medium' | 'small';\nexport type AsteroidDamage = 0.2 | 0.15 | 0.1;\nexport type AsteroidHitBox = 40 | 30 | 20;\nexport type AsteroidSpeed = 1 | 2 | 3;\nexport type AsteroidsCount = Record<AsteroidSize, number>;\n\n// interfaces\nexport interface AsteroidOptions extends Omit<GameObjectOptions, 'type'> {\n  size?: AsteroidSize;\n}\n\nexport interface AsteroidSnapshot extends GameObjectSnapshot {\n  size: AsteroidSize;\n  damage: AsteroidDamage;\n}\n\n// constants\nexport const sizes: AsteroidSize[] = ['large', 'medium', 'small'];\n\nexport const speeds: Record<AsteroidSize, AsteroidSpeed> = {\n  large: 1,\n  medium: 2,\n  small: 3\n};\n\nexport const hitBoxes: Record<AsteroidSize, AsteroidHitBox> = {\n  large: 40,\n  medium: 30,\n  small: 20\n};\n\nexport const damages: Record<AsteroidSize, AsteroidDamage> = {\n  large: 0.2,\n  medium: 0.15,\n  small: 0.1\n};\n\nclass Asteroid extends GameObject {\n  public size: AsteroidSize;\n  public damage: AsteroidDamage;\n\n  constructor(options: AsteroidOptions = {}) {\n    let sign = Math.random() > 0.5 ? 1 : -1;\n    let size = options.size || 'large';\n    super({\n      world: options.world,\n      coords: options.coords,\n      hitBoxRadius: hitBoxes[size],\n      speed: speeds[size],\n      type: 'asteroid',\n      direction: options.direction || Math.random() * Math.PI * 2,\n      rotationSpeed: options.rotationSpeed || (sign * Math.PI) / 50\n    });\n    this.size = size;\n    this.damage = damages[size];\n  }\n\n  public update() {\n    super.update();\n  }\n\n  public splitSize(): AsteroidSize | null {\n    if (this.size === 'large') return 'medium';\n    if (this.size === 'medium') return 'small';\n    return null;\n  }\n\n  public serialize(): AsteroidSnapshot {\n    return {\n      ...super.serialize(),\n      size: this.size,\n      damage: this.damage\n    };\n  }\n}\n\nexport default Asteroid;\n","import Drop, { DropOptions, DropType } from './Drop';\nimport { GameState } from './GameEngine';\nimport {\n  notDirection,\n  Point,\n  randomCoordsFarFrom,\n  Rect\n} from '../lib/geometry';\nimport Asteroid, { AsteroidOptions, AsteroidSize } from './Asteroid';\nimport { filter } from 'lodash';\n\nexport interface SpawnOptions {\n  count?: number;\n  coords?: Point;\n}\n\nexport interface BonusSpawnOptions extends SpawnOptions {\n  type?: DropType;\n}\n\nexport interface AsteroidSpawnOptions extends SpawnOptions {\n  size?: AsteroidSize;\n  notDirection?: number;\n}\n\nexport type SpawnerEtas = {\n  asteroids: number;\n  bonuses: number;\n};\n\nexport type ID = string;\n\nclass Spawner {\n  // public\n  public state: GameState;\n  public world: Rect;\n  public nextBonusSpawnAt: number;\n  public nextAsteroidSpawnAt: number;\n  // private\n  private asteroidTimer?: NodeJS.Timeout;\n  private bonusTimer?: NodeJS.Timeout;\n  private HIT_BOX_MULTIPLIER = 5;\n  private CONE_ANGLE = Math.PI / 3;\n\n  constructor(state: GameState, world: Rect) {\n    this.state = state;\n    this.world = world;\n    this.nextAsteroidSpawnAt = Infinity;\n    this.nextBonusSpawnAt = Infinity;\n  }\n\n  public getEtas(): SpawnerEtas {\n    return {\n      asteroids: this.nextAsteroidSpawnAt - Date.now(),\n      bonuses: this.nextBonusSpawnAt - Date.now()\n    };\n  }\n\n  public spawnBonus(options: BonusSpawnOptions = {}): Drop[] {\n    let { bonuses } = this.state;\n    let added: Drop[] = [];\n    for (let i = 0; i < (options.count || 1); i++) {\n      let dropOptions = this.makeDropOptions(options);\n      if (!this.allowDropSpawn(dropOptions.type)) return added;\n      let drop = new Drop(dropOptions);\n      bonuses.push(drop);\n      added.push(drop);\n    }\n    return added;\n  }\n\n  public spawnAsteroid(options: AsteroidSpawnOptions = {}): Asteroid[] {\n    let { asteroids } = this.state;\n    let added: Asteroid[] = [];\n    for (let i = 0; i < (options.count || 1); i++) {\n      let asteroidOptions = this.makeAsteroidOptions(options);\n      let asteroid = new Asteroid(asteroidOptions);\n      asteroids.push(asteroid);\n      added.push(asteroid);\n    }\n    return added;\n  }\n\n  public asteroidEvery(ms: number, options: AsteroidSpawnOptions = {}) {\n    this.nextAsteroidSpawnAt = Date.now() + ms;\n    this.asteroidTimer = setInterval(() => {\n      this.spawnAsteroid(options);\n      this.nextAsteroidSpawnAt = Date.now() + ms;\n    }, ms);\n  }\n\n  public bonusEvery(ms: number, options: BonusSpawnOptions = {}) {\n    this.nextBonusSpawnAt = Date.now() + ms;\n    this.bonusTimer = setInterval(() => {\n      this.spawnBonus(options);\n      this.nextBonusSpawnAt = Date.now() + ms;\n    }, ms);\n  }\n\n  private makeDropOptions(options: BonusSpawnOptions = {}): DropOptions {\n    let type = options.type || 'ammo';\n    let coords =\n      options.coords ||\n      randomCoordsFarFrom(this.state.ship, this.world, this.HIT_BOX_MULTIPLIER);\n    return {\n      type,\n      world: this.world,\n      coords\n    };\n  }\n\n  private allowDropSpawn(type: DropType): Boolean {\n    let { bonuses } = this.state;\n    let alreadySpawned = filter(bonuses, { dropType: type }).length;\n    return alreadySpawned < 3;\n  }\n\n  private makeAsteroidOptions(\n    options: AsteroidSpawnOptions = {}\n  ): AsteroidOptions {\n    let direction = Math.random() * Math.PI * 2;\n    if (options.notDirection) {\n      direction = notDirection(\n        options.notDirection,\n        this.CONE_ANGLE,\n        Math.random\n      );\n    }\n    return {\n      size: options.size || 'large',\n      world: this.world,\n      coords:\n        options.coords ||\n        randomCoordsFarFrom(\n          this.state.ship,\n          this.world,\n          this.HIT_BOX_MULTIPLIER\n        ),\n      direction\n    };\n  }\n}\n\nexport default Spawner;\n","import Ship, { ShipSnapshot } from './Ship';\nimport Asteroid, {\n  AsteroidsCount,\n  AsteroidSize,\n  AsteroidSnapshot\n} from './Asteroid';\nimport { haveCollided, Rect, Point, centerOf } from '../lib/geometry';\nimport * as ev from './Events';\nimport { remove, find, filter } from 'lodash';\nimport Drop, { DropSnapshot } from './Drop';\nimport Spawner, { SpawnerEtas } from './Spawner';\nimport Bullet from './Bullet';\n\nexport type GameStatus = 'playing' | 'won' | 'lost' | 'idle';\n\nexport type LevelOptions = {\n  startAsteroids: number;\n  asteroidSpawner: {\n    every: number;\n    amount: number;\n  };\n  bonusSpawner: {\n    every: number;\n  };\n};\n\nexport interface GameState {\n  ship: Ship;\n  asteroids: Asteroid[];\n  bonuses: Drop[];\n  events: ev.GameEvent[];\n}\n\nexport interface GameSnapshot {\n  world: Rect;\n  createdAt: number;\n  status: GameStatus;\n  etas: SpawnerEtas;\n  ship: ShipSnapshot;\n  asteroids: AsteroidSnapshot[];\n  bonuses: DropSnapshot[];\n  events: ev.GameEventSnapshot[];\n}\n\nclass GameEngine {\n  // public\n  public state: GameState;\n  public status: GameStatus = 'idle';\n  public world: Rect;\n  public spawner: Spawner;\n  // private\n  private gameOverCallback?: () => void;\n  private gameWonCallback?: () => void;\n  private snapshotTimeout?: NodeJS.Timeout;\n\n  constructor(world: Rect) {\n    this.state = {\n      asteroids: [],\n      bonuses: [],\n      events: [],\n      ship: new Ship({ world, coords: centerOf(world) })\n    };\n    this.world = world;\n    this.spawner = new Spawner(this.state, this.world);\n  }\n\n  public startLevel(callback: (snapshot: any) => void): void {\n    let { spawner } = this;\n    this.status = 'playing';\n    spawner.spawnAsteroid({ count: 30 });\n    spawner.asteroidEvery(5_000, { count: 6 });\n    spawner.bonusEvery(3_000, { type: 'ammo' });\n    spawner.bonusEvery(3_000, { type: 'fix' });\n    spawner.bonusEvery(3_000, { type: 'fuel' });\n    this.snapshotTimeout = setInterval(() => {\n      callback(this.createSnapshot());\n    }, 16);\n  }\n\n  public onGameOver(callback: () => void) {\n    this.gameOverCallback = callback;\n  }\n\n  public onGameWon(callback: () => void) {\n    this.gameWonCallback = callback;\n  }\n\n  private update(): void {\n    this.state.ship.update();\n    this.updateAsteroids();\n    this.updateBonuses();\n    this.checkCollisions();\n    this.checkGameWon();\n    this.checkGameLost();\n  }\n\n  private countAsteroids(size: AsteroidSize): number {\n    return filter(this.state.asteroids, { size }).length;\n  }\n\n  public hasAsteroid(id: string): boolean {\n    return Boolean(find(this.state.asteroids, { id }));\n  }\n\n  public getAsteroidsCount(): AsteroidsCount {\n    return {\n      large: this.countAsteroids('large'),\n      medium: this.countAsteroids('medium'),\n      small: this.countAsteroids('small')\n    };\n  }\n\n  private createSnapshot(): GameSnapshot {\n    this.update();\n    let etas = this.spawner.getEtas();\n    let { ship, asteroids, bonuses, events } = this.state;\n    let snapshot = {\n      world: this.world,\n      createdAt: Date.now(),\n      status: this.status,\n      etas,\n      ship: ship.serialize(),\n      asteroids: asteroids.map((a) => a.serialize()),\n      bonuses: bonuses.map((b) => b.serialize()),\n      events: events.map((e) => e.serialize())\n    };\n\n    // let serializedSnapshot = JSON.parse(JSON.stringify(snapshot));\n    this.state.events = [];\n\n    return snapshot;\n  }\n\n  private checkGameLost(): void {\n    let { ship } = this.state;\n    if (ship.life <= 0) {\n      this.status = 'lost';\n      if (this.snapshotTimeout) {\n        clearInterval(this.snapshotTimeout);\n      }\n      if (this.gameOverCallback) {\n        this.gameOverCallback();\n      } else {\n        console.log('game over without a callback');\n      }\n    }\n  }\n\n  private checkGameWon(): void {\n    if (this.state.asteroids.length === 0) {\n      this.status = 'won';\n      if (this.snapshotTimeout) {\n        clearInterval(this.snapshotTimeout);\n      }\n      if (this.gameWonCallback) {\n        this.gameWonCallback();\n      } else {\n        console.log('game won without a callback');\n      }\n    }\n  }\n\n  private updateAsteroids(): void {\n    this.state.asteroids.forEach((asteroid) => {\n      asteroid.update();\n    });\n  }\n\n  private updateBonuses(): void {\n    this.state.bonuses.forEach((bonus) => {\n      bonus.update();\n    });\n  }\n\n  \n\n  private checkCollisions(): void {\n    let { asteroids, ship, events, bonuses } = this.state;\n    asteroids.forEach((asteroid) => {\n      ship.bullets.forEach((bullet) => {\n        if (haveCollided(asteroid, bullet)) {\n          let event = new ev.BulletHit(bullet, asteroid);\n          events.push(event);\n          this.processBulletHit(event);\n        }\n      });\n      if (haveCollided(asteroid, ship)) {\n        let event = new ev.ShipHit(asteroid);\n        events.push(event);\n        this.processShipHit(event);\n      }\n    });\n    bonuses.forEach((bonus) => {\n      if (haveCollided(bonus, ship)) {\n        let event = new ev.GotBonus(bonus);\n        events.push(event);\n        this.processGotBonus(event);\n      }\n    });\n  }\n\n  // private processEvents(): void {\n  //   this.state.events.forEach((event) => {\n  //     if (event instanceof ev.BulletHit) {\n  //       this.processBulletHit(event);\n  //     } else if (event instanceof ev.ShipHit) {\n  //       this.processShipHit(event);\n  //     } else if (event instanceof ev.GotBonus) {\n  //       this.processGotBonus(event);\n  //     } else {\n  //       console.log('invalid event', event);\n  //     }\n  //   });\n  //   this.state.events = [];\n  // }\n\n  private processBulletHit(event: ev.BulletHit): void {\n    let { asteroids, ship } = this.state;\n    let asteroid = find(asteroids, { id: event.asteroidId });\n    if (asteroid) {\n      this.createLoot(asteroid.coords);\n      let nextSize = asteroid.splitSize();\n      if (nextSize) {\n        this.spawner.spawnAsteroid({\n          count: 2,\n          size: nextSize,\n          coords: asteroid.coords,\n          notDirection: this.state.ship.direction\n        });\n      }\n      remove(asteroids, { id: event.asteroidId });\n    } else {\n      console.log('ship has collided with asteroid at previous update');\n    }\n    remove(ship.bullets, { id: event.bulletId });\n  }\n\n  private processShipHit(event: ev.ShipHit): void {\n    let { asteroids, ship } = this.state;\n    remove(asteroids, { id: event.asteroidId });\n    ship.life -= event.damage;\n  }\n\n  private processGotBonus(event: ev.GotBonus): void {\n    let { ship, bonuses } = this.state;\n    ship.collectBonus(event.bonusType);\n    remove(bonuses, { id: event.bonusId });\n  }\n\n  private createLoot(coords: Point): void {\n    // console.log('create loot not implemented');\n  }\n}\n\nexport default GameEngine;\n","import GameEngine, { GameSnapshot } from '../core/GameEngine';\nimport { Command } from '../client/KeyController';\n\ntype ClientEvent = 'start' | 'command';\n\nclass GameServer {\n  private engine: GameEngine;\n  private container: HTMLElement;\n  constructor() {\n    this.engine = new GameEngine({ width: 4000, height: 2000 });\n    this.container = document.getElementById('root')!;\n  }\n\n  public start() {\n    this.on('start', this.handleStartRequest);\n    this.on('command', this.handleCommand);\n  }\n\n  private on(type: ClientEvent, handler: (event: CustomEvent) => any) {\n    this.container.addEventListener(type, handler.bind(this) as EventListener);\n  }\n\n  private handleStartRequest(event: CustomEvent) {\n    // create client id\n    // add engine to engines array\n    // send client id back to client\n    // start sending updates to the client\n    this.engine.startLevel(this.sendSnapshotToClient.bind(this));\n    this.container.dispatchEvent(new Event('started'));\n  }\n\n  private sendSnapshotToClient(snapshot: GameSnapshot) {\n    this.container.dispatchEvent(\n      new CustomEvent('snapshot', { detail: snapshot })\n    );\n  }\n\n  private handleCommand(event: CustomEvent) {\n    let command = event.detail as Command;\n    let { ship } = this.engine.state;\n    switch (command) {\n      case 'turnLeft':\n        return ship.turnLeft();\n      case 'turnRight':\n        return ship.turnRight();\n      case 'accelerate':\n        return ship.accelerate();\n      case 'decelerate':\n        return ship.decelerate();\n      case 'fire':\n        return ship.fire();\n      case 'useFix':\n        return ship.useBonus('fix');\n      case 'useFuel':\n        return ship.useBonus('fuel');\n      case 'useAmmo':\n        return ship.useBonus('ammo');\n    }\n  }\n}\n\nexport default GameServer;\n","import P5 from 'p5';\nimport { ShipSnapshot } from '../core/Ship';\nimport { SpawnerEtas } from '../core/Spawner';\nimport { Point, Rect } from '../lib/geometry';\nimport { AsteroidSnapshot } from '../core/Asteroid';\nimport { ColorsMap } from './colors';\nimport { GameSnapshot } from '../core/GameEngine';\nimport { filter } from 'lodash';\n\ntype GuiComponent = 'asteroids' | 'ship' | 'timers' | 'bonuses';\n\nconst SPACING = 20;\n\nclass GUI {\n  // private\n  private p5: P5;\n  private anchors: Record<GuiComponent, Point>;\n  private colors: ColorsMap;\n  constructor(p5: P5, colors: ColorsMap) {\n    this.p5 = p5;\n    this.colors = colors;\n    this.anchors = createAnchors({\n      width: p5.windowWidth,\n      height: p5.windowHeight\n    });\n  }\n\n  public draw(snapshot: GameSnapshot) {\n    let { ship, asteroids, timers, bonuses } = this.anchors;\n    this.asteroids(snapshot.asteroids, asteroids);\n    this.ship(snapshot.ship, ship);\n    this.timers(snapshot.etas, timers);\n    this.bonuses(snapshot.ship, bonuses);\n  }\n\n  private asteroids(asteroids: AsteroidSnapshot[], topLeft: Point): void {\n    let { p5 } = this;\n    let large = filter(asteroids, { size: 'large' }).length;\n    let medium = filter(asteroids, { size: 'medium' }).length;\n    let small = filter(asteroids, { size: 'small' }).length;\n    p5.text(`asteroids: ${large} | ${medium} | ${small}`, topLeft.x, topLeft.y);\n  }\n\n  private ship(ship: ShipSnapshot, topLeft: Point) {\n    let { ammo, fuel, cargo, life, speed } = ship;\n    let { x, y } = topLeft;\n    let { p5 } = this;\n    p5.fill('white');\n    p5.noStroke();\n    p5.text(`fuel: ${percentToString(fuel)} [${cargo.fuel}]`, x, y);\n    p5.text(`ammo: ${ammo} [${cargo.ammo}]`, x, 40);\n    p5.text(`life: ${percentToString(life)} [${cargo.fix}]`, x, 60);\n    p5.text(`speed: ${percentToString(speed)}`, x, 100);\n  }\n\n  private timers(etas: SpawnerEtas, topLeft: Point) {\n    let { p5 } = this;\n    let { x, y } = topLeft;\n    p5.text(`Asteroids in: ${(etas.asteroids / 1000).toFixed(0)}s`, x, y);\n    p5.text(`Drops in: ${(etas.bonuses / 1000).toFixed(0)}s`, x, y + 20);\n  }\n\n  private bonuses(ship: ShipSnapshot, topLeft: Point): void {\n    let { p5 } = this;\n    let { x, y } = topLeft;\n    let suggestions = [\n      ship.fuel < 0.3 && ship.cargo.fuel > 0,\n      ship.ammo < 30 && ship.cargo.ammo > 0,\n      ship.life < 0.3 && ship.cargo.fix > 0\n    ];\n    let keys = ['Q', 'W', 'E'];\n    let activeColors = [this.colors.fuel, this.colors.ammo, this.colors.life];\n    let side = SPACING * 2;\n    let padding = SPACING;\n    p5.push();\n    p5.translate(x, y);\n    p5.rectMode(p5.CENTER);\n    p5.textAlign(p5.CENTER);\n    for (let i = 0; i < 3; i++) {\n      let currentX = i * (side + padding);\n      p5.fill(suggestions[i] ? activeColors[i] : 'rgba(0,0,0,0)');\n      p5.stroke(suggestions[i] ? activeColors[i] : this.colors.inactive);\n      p5.text(keys[i], currentX, 0);\n      p5.rect(currentX, 0, side, side, 10);\n    }\n    p5.pop();\n  }\n}\n\nfunction percentToString(value: number): string {\n  return (value * 100).toFixed(0) + '%';\n}\n\nfunction createAnchors(screen: Rect): Record<GuiComponent, Point> {\n  return {\n    asteroids: { x: SPACING, y: SPACING * 4 },\n    ship: { x: SPACING, y: SPACING },\n    timers: {\n      x: screen.width - SPACING * 5,\n      y: SPACING\n    },\n    bonuses: {\n      x: SPACING,\n      y: screen.height - SPACING * 2\n    }\n  };\n}\n\nexport default GUI;\n","export type ColorCode = 'fuel' | 'inactive' | 'life' | 'ammo' | 'hud' | 'space';\nexport type ColorsMap = Record<ColorCode, string>;\n\nconst colors: ColorsMap = {\n  fuel: '#0CA789',\n  inactive: '#808080',\n  life: '#F24726',\n  ammo: '#E6E6E6',\n  hud: '#2D9BF0',\n  space: 'black'\n};\n\nexport default colors;\n","import P5 from 'p5';\nimport { Point } from '../lib/geometry';\nimport { DrawableObject } from './Drawer';\n\nexport interface AnimationFrame extends DrawableObject {\n  image: P5.Image;\n  frameCount: number;\n}\n\nclass Animation {\n  public isExpired: boolean = false;\n  private frameCount: number = 0;\n  constructor(private frames: P5.Image[], private coords: Point) {}\n\n  public next(): AnimationFrame | false {\n    if (this.frameCount > 31) {\n      this.isExpired = true;\n      return false;\n    } else {\n      return {\n        coords: this.coords,\n        direction: 0,\n        hitBoxRadius: 60,\n        orientation: 0,\n        image: this.frames[this.frameCount],\n        frameCount: this.frameCount++\n      };\n    }\n  }\n}\n\nexport default Animation;\n","import { GameSnapshot } from '../core/GameEngine';\nimport P5 from 'p5';\nimport { drawableCoords, Point, Rect } from '../lib/geometry';\nimport { DrawerAssets } from './Sketch';\nimport { GameObjectSnapshot } from '../core/GameObject';\nimport { DropSnapshot } from '../core/Drop';\nimport { AsteroidSnapshot } from '../core/Asteroid';\nimport GUI from './GUI';\nimport COLORS from './colors';\nimport Animation from './Animation';\n\ninterface DrawGameObjectOptions {\n  image: P5.Image;\n  rotateDirection?: boolean;\n  rotationOffset?: number;\n}\n\ninterface DrawerOptions {\n  p5: P5;\n  assets: DrawerAssets;\n  rootElementId: string;\n  showHitBoxes?: boolean;\n}\n\nexport interface DrawableObject {\n  coords: Point;\n  hitBoxRadius: number;\n  orientation: number;\n  direction: number;\n}\n\ninterface Star {\n  x: number;\n  y: number;\n  radius: number;\n}\n\nclass Drawer {\n  // private\n  private p5: P5;\n  private stars: Star[] = [];\n  private assets: DrawerAssets;\n  private showHitBoxes: boolean;\n  private screen: Rect;\n  private gui: GUI;\n  private snapshot?: GameSnapshot;\n  private animations: Animation[] = [];\n  // constructor\n  constructor(options: DrawerOptions) {\n    this.p5 = options.p5;\n    const canvas = this.p5.createCanvas(\n      this.p5.windowWidth,\n      this.p5.windowHeight\n    );\n    canvas.parent(options.rootElementId);\n    this.assets = options.assets;\n    this.showHitBoxes = options.showHitBoxes || false;\n    this.screen = {\n      width: this.p5.windowWidth,\n      height: this.p5.windowHeight\n    };\n    this.gui = new GUI(this.p5, COLORS);\n  }\n\n  public updateSnapshot(snapshot: GameSnapshot) {\n    if (!snapshot) return;\n    if (!this.snapshot) {\n      this.createStars(snapshot.world, 200);\n    }\n    this.snapshot = snapshot;\n  }\n\n  public draw(): void {\n    if (this.snapshot) {\n      switch (this.snapshot.status) {\n        case 'playing':\n          this.gameScreen(this.snapshot);\n          break;\n        case 'lost':\n          this.gameOverScreen();\n          break;\n        case 'won':\n          this.gameWonScreen();\n          break;\n        case 'idle':\n          console.log('idle');\n          break;\n      }\n    }\n  }\n\n  private gameScreen(snapshot: GameSnapshot): void {\n    this.drawEnvironment();\n    this.drawGameObjects(snapshot);\n    this.drawAnimations(snapshot);\n    this.gui.draw(snapshot);\n  }\n\n  private gameOverScreen(): void {\n    let { p5 } = this;\n    p5.background(COLORS.space);\n    p5.fill('yellow');\n    p5.textAlign(p5.CENTER);\n    p5.text('GAME OVER', p5.windowWidth / 2, p5.windowHeight / 2);\n    p5.text(\n      'press F5 to try again',\n      p5.windowWidth / 2,\n      p5.windowHeight / 2 + 30\n    );\n    p5.textAlign(p5.LEFT);\n  }\n\n  private gameWonScreen(): void {\n    let { p5 } = this;\n    p5.background(COLORS.space);\n    p5.fill('yellow');\n    p5.textAlign(p5.CENTER);\n    p5.text('GAME WON!', p5.windowWidth / 2, p5.windowHeight / 2);\n    p5.text(\n      'press F5 to try again',\n      p5.windowWidth / 2,\n      p5.windowHeight / 2 + 30\n    );\n    p5.textAlign(p5.LEFT);\n  }\n\n  private drawEnvironment(): void {\n    let { p5, stars } = this;\n    p5.background(COLORS.space);\n    this.drawStars(stars);\n  }\n\n  private drawGameObjects(snapshot: GameSnapshot): void {\n    let { ship, bonuses, asteroids } = snapshot;\n    this.drawBullets(ship.bullets);\n    this.drawShip(ship);\n    this.drawBonuses(bonuses);\n    this.drawAsteroids(asteroids);\n  }\n\n  private drawAnimations(snapshot: GameSnapshot): void {\n    // save new animations\n    snapshot.events.forEach((event) => {\n      if (event.type === 'BULLET_HIT' || event.type === 'SHIP_HIT') {\n        this.animations.push(\n          new Animation(this.assets.explosionAnimation, event.coords)\n        );\n      }\n    });\n    // draw existing animations\n    this.animations.forEach((animation) => {\n      let drawable = animation.next();\n      if (drawable) {\n        this.drawGameObject(drawable, { image: drawable.image });\n      }\n    });\n    // remove expired animations\n    this.animations = this.animations.filter((animation) => {\n      return !animation.isExpired;\n    });\n  }\n\n  private createStars(world: Rect, amount: number): void {\n    for (let i = 0; i < amount; i++) {\n      this.stars.push({\n        x: Math.random() * world.width,\n        y: Math.random() * world.height,\n        radius: Math.random() > 0.5 ? 2 : 1\n      });\n    }\n  }\n\n  private drawableCoords(object: Point): Point | undefined {\n    return drawableCoords(\n      object,\n      this.snapshot?.ship.coords || { x: 0, y: 0 },\n      this.screen,\n      this.snapshot?.world || { width: 1000, height: 1000 }\n    );\n  }\n\n  private drawStars(stars: Star[]): void {\n    let { p5 } = this;\n    p5.noStroke();\n    p5.fill('white');\n    stars.forEach((star) => {\n      let coords = this.drawableCoords(star);\n      coords && p5.circle(coords.x, coords.y, star.radius);\n    });\n  }\n\n  private drawBonuses(bonuses: DropSnapshot[]): void {\n    bonuses.forEach((bonus) => {\n      this.drawGameObject(bonus, { image: this.assets.images[bonus.dropType] });\n    });\n  }\n\n  private drawAsteroids(asteroids: AsteroidSnapshot[]): void {\n    asteroids.forEach((a) => {\n      this.drawGameObject(a, { image: this.assets.images.asteroid });\n    });\n  }\n\n  private drawGameObject(\n    object: DrawableObject,\n    options: DrawGameObjectOptions\n  ): boolean {\n    let { p5 } = this;\n    let coords = this.drawableCoords(object.coords);\n    if (!coords) return false;\n    let side = object.hitBoxRadius * 2;\n    p5.imageMode(p5.CENTER);\n    p5.push();\n    p5.translate(coords.x, coords.y);\n    p5.rotate(object.orientation);\n    p5.rotate(options.rotateDirection ? object.direction : 0);\n    p5.rotate(options.rotationOffset ? options.rotationOffset : 0);\n    p5.image(options.image, 0, 0, side, side);\n    if (this.showHitBoxes) {\n      p5.noFill();\n      p5.stroke('red');\n      p5.circle(0, 0, side);\n    }\n    p5.pop();\n    return true;\n  }\n\n  private drawShip(ship: GameObjectSnapshot): void {\n    this.drawGameObject(ship, {\n      image: this.assets.images.ship,\n      rotateDirection: true,\n      rotationOffset: Math.PI / 2\n    });\n  }\n\n  private drawBullets(bullets: GameObjectSnapshot[]): void {\n    bullets.forEach((bullet) => {\n      this.drawGameObject(bullet, {\n        image: this.assets.images.bullet\n      });\n    });\n  }\n}\n\nexport default Drawer;\n","import P5 from 'p5';\nimport { GameSnapshot } from '../core/GameEngine';\nimport KeyController from './KeyController';\nimport Drawer from './Drawer';\nimport { FrameObject, SpriteSheet } from './animations';\n// import {} from '@code-dot-org/p5.play';\n// import {}\nexport type ImageAsset =\n  | 'asteroid'\n  | 'ship'\n  | 'fix'\n  | 'ammo'\n  | 'fuel'\n  | 'bullet';\n\nexport type AnimationType = 'explosion';\n\nexport interface DrawerAssets {\n  // images: Record<ImageAsset, P5.Image>;\n  images: any;\n  explosionAnimation: P5.Image[];\n  // frames: Record<AnimationType, FrameObject[]>;\n  // sprites\n}\n\ninterface SnapshotEvent extends CustomEvent {\n  detail: GameSnapshot;\n}\n\nconst rootElementId = 'root';\n\nconst Sketch = (p5: P5) => {\n  var keyController = new KeyController(rootElementId);\n  var drawer: Drawer;\n  var assets: DrawerAssets = { images: {}, explosionAnimation: [] };\n  var lastSnapshot: GameSnapshot;\n\n  p5.preload = async () => {\n    assets.images = loadImageAssets(p5);\n    // let spriteSheet = p5.loadImage('./assets/explosions.png');\n    assets.explosionAnimation = await loadExplosionAnimation(p5);\n    // console.log(assets.explosionAnimation);\n  };\n\n  p5.setup = () => {\n    let container = document.getElementById(rootElementId)!;\n    container.addEventListener('snapshot', ((event: SnapshotEvent) => {\n      lastSnapshot = event.detail;\n    }) as EventListener);\n    // todo: add listener for game events (animations)\n    setTimeout(() => {\n      container.dispatchEvent(new Event('start'));\n    }, 1000);\n    p5.frameRate(60);\n    drawer = new Drawer({\n      p5,\n      assets,\n      rootElementId,\n      showHitBoxes: false\n    });\n  };\n\n  p5.keyPressed = () => {\n    keyController.pressed(p5.keyCode);\n  };\n\n  p5.draw = () => {\n    try {\n      drawer.updateSnapshot(lastSnapshot);\n    } catch (error) {\n      console.error('Failed to update snapshot', error);\n    }\n    try {\n      drawer.draw();\n    } catch (error) {\n      console.error('Failed to draw', error);\n    }\n  };\n};\n\nfunction loadJSON(p5: P5, path: string): Promise<any> {\n  return new Promise((resolve, reject) => {\n    p5.loadJSON(\n      path,\n      (data) => {\n        resolve(data);\n      },\n      (error) => {\n        reject(error);\n      }\n    );\n  });\n}\n\nfunction loadImage(p5: P5, path: string): Promise<P5.Image> {\n  return new Promise((resolve, reject) => {\n    p5.loadImage(\n      path,\n      (image: P5.Image) => {\n        resolve(image);\n      },\n      (error) => {\n        reject(error);\n      }\n    );\n  });\n}\n\nasync function loadExplosionAnimation(p5: P5) {\n  let animation = [];\n  try {\n    for (let i = 0; i <= 31; i++) {\n      let twoDigitsPadded = i.toString().padStart(2, '0');\n      let path = `./assets/explosion/expl_06_00${twoDigitsPadded}.png`;\n      let img = await loadImage(p5, path);\n      animation.push(img);\n    }\n  } catch (error) {\n    console.error(error);\n    throw Error('Could not load explosion animation');\n  }\n  return animation;\n}\n\nfunction loadImageAssets(p5: P5) {\n  return {\n    asteroid: p5.loadImage('./assets/asteroid.png'),\n    ship: p5.loadImage('./assets/ship1.png'),\n    fix: p5.loadImage('./assets/fix.png'),\n    ammo: p5.loadImage('./assets/ammo.png'),\n    fuel: p5.loadImage('./assets/fuel.png'),\n    bullet: p5.loadImage('./assets/bullet.png')\n  };\n}\n\nexport default Sketch;\n","import './style.css';\nimport GameServer from './server/GameServer';\nimport Sketch from './client/Sketch';\nimport P5 from 'p5';\n\nlet server = new GameServer();\nserver.start();\n\nnew P5(Sketch);\n"],"sourceRoot":""}